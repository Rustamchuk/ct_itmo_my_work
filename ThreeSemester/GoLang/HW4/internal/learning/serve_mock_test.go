package learning

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i hw4/internal/learning.Serve -o ./serve_mock_test.go -n ServeMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ServeMock implements Serve
type ServeMock struct {
	t minimock.Tester

	funcGetTopSubjects          func(topN int) (sa1 []string, b1 bool)
	inspectFuncGetTopSubjects   func(topN int)
	afterGetTopSubjectsCounter  uint64
	beforeGetTopSubjectsCounter uint64
	GetTopSubjectsMock          mServeMockGetTopSubjects

	funcGetTutorsIDPreferIndividual          func(studentID int64) (ia1 []int64, b1 bool)
	inspectFuncGetTutorsIDPreferIndividual   func(studentID int64)
	afterGetTutorsIDPreferIndividualCounter  uint64
	beforeGetTutorsIDPreferIndividualCounter uint64
	GetTutorsIDPreferIndividualMock          mServeMockGetTutorsIDPreferIndividual
}

// NewServeMock returns a mock for Serve
func NewServeMock(t minimock.Tester) *ServeMock {
	m := &ServeMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetTopSubjectsMock = mServeMockGetTopSubjects{mock: m}
	m.GetTopSubjectsMock.callArgs = []*ServeMockGetTopSubjectsParams{}

	m.GetTutorsIDPreferIndividualMock = mServeMockGetTutorsIDPreferIndividual{mock: m}
	m.GetTutorsIDPreferIndividualMock.callArgs = []*ServeMockGetTutorsIDPreferIndividualParams{}

	return m
}

type mServeMockGetTopSubjects struct {
	mock               *ServeMock
	defaultExpectation *ServeMockGetTopSubjectsExpectation
	expectations       []*ServeMockGetTopSubjectsExpectation

	callArgs []*ServeMockGetTopSubjectsParams
	mutex    sync.RWMutex
}

// ServeMockGetTopSubjectsExpectation specifies expectation struct of the Serve.GetTopSubjects
type ServeMockGetTopSubjectsExpectation struct {
	mock    *ServeMock
	params  *ServeMockGetTopSubjectsParams
	results *ServeMockGetTopSubjectsResults
	Counter uint64
}

// ServeMockGetTopSubjectsParams contains parameters of the Serve.GetTopSubjects
type ServeMockGetTopSubjectsParams struct {
	topN int
}

// ServeMockGetTopSubjectsResults contains results of the Serve.GetTopSubjects
type ServeMockGetTopSubjectsResults struct {
	sa1 []string
	b1  bool
}

// Expect sets up expected params for Serve.GetTopSubjects
func (mmGetTopSubjects *mServeMockGetTopSubjects) Expect(topN int) *mServeMockGetTopSubjects {
	if mmGetTopSubjects.mock.funcGetTopSubjects != nil {
		mmGetTopSubjects.mock.t.Fatalf("ServeMock.GetTopSubjects mock is already set by Set")
	}

	if mmGetTopSubjects.defaultExpectation == nil {
		mmGetTopSubjects.defaultExpectation = &ServeMockGetTopSubjectsExpectation{}
	}

	mmGetTopSubjects.defaultExpectation.params = &ServeMockGetTopSubjectsParams{topN}
	for _, e := range mmGetTopSubjects.expectations {
		if minimock.Equal(e.params, mmGetTopSubjects.defaultExpectation.params) {
			mmGetTopSubjects.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetTopSubjects.defaultExpectation.params)
		}
	}

	return mmGetTopSubjects
}

// Inspect accepts an inspector function that has same arguments as the Serve.GetTopSubjects
func (mmGetTopSubjects *mServeMockGetTopSubjects) Inspect(f func(topN int)) *mServeMockGetTopSubjects {
	if mmGetTopSubjects.mock.inspectFuncGetTopSubjects != nil {
		mmGetTopSubjects.mock.t.Fatalf("Inspect function is already set for ServeMock.GetTopSubjects")
	}

	mmGetTopSubjects.mock.inspectFuncGetTopSubjects = f

	return mmGetTopSubjects
}

// Return sets up results that will be returned by Serve.GetTopSubjects
func (mmGetTopSubjects *mServeMockGetTopSubjects) Return(sa1 []string, b1 bool) *ServeMock {
	if mmGetTopSubjects.mock.funcGetTopSubjects != nil {
		mmGetTopSubjects.mock.t.Fatalf("ServeMock.GetTopSubjects mock is already set by Set")
	}

	if mmGetTopSubjects.defaultExpectation == nil {
		mmGetTopSubjects.defaultExpectation = &ServeMockGetTopSubjectsExpectation{mock: mmGetTopSubjects.mock}
	}
	mmGetTopSubjects.defaultExpectation.results = &ServeMockGetTopSubjectsResults{sa1, b1}
	return mmGetTopSubjects.mock
}

// Set uses given function f to mock the Serve.GetTopSubjects method
func (mmGetTopSubjects *mServeMockGetTopSubjects) Set(f func(topN int) (sa1 []string, b1 bool)) *ServeMock {
	if mmGetTopSubjects.defaultExpectation != nil {
		mmGetTopSubjects.mock.t.Fatalf("Default expectation is already set for the Serve.GetTopSubjects method")
	}

	if len(mmGetTopSubjects.expectations) > 0 {
		mmGetTopSubjects.mock.t.Fatalf("Some expectations are already set for the Serve.GetTopSubjects method")
	}

	mmGetTopSubjects.mock.funcGetTopSubjects = f
	return mmGetTopSubjects.mock
}

// When sets expectation for the Serve.GetTopSubjects which will trigger the result defined by the following
// Then helper
func (mmGetTopSubjects *mServeMockGetTopSubjects) When(topN int) *ServeMockGetTopSubjectsExpectation {
	if mmGetTopSubjects.mock.funcGetTopSubjects != nil {
		mmGetTopSubjects.mock.t.Fatalf("ServeMock.GetTopSubjects mock is already set by Set")
	}

	expectation := &ServeMockGetTopSubjectsExpectation{
		mock:   mmGetTopSubjects.mock,
		params: &ServeMockGetTopSubjectsParams{topN},
	}
	mmGetTopSubjects.expectations = append(mmGetTopSubjects.expectations, expectation)
	return expectation
}

// Then sets up Serve.GetTopSubjects return parameters for the expectation previously defined by the When method
func (e *ServeMockGetTopSubjectsExpectation) Then(sa1 []string, b1 bool) *ServeMock {
	e.results = &ServeMockGetTopSubjectsResults{sa1, b1}
	return e.mock
}

// GetTopSubjects implements Serve
func (mmGetTopSubjects *ServeMock) GetTopSubjects(topN int) (sa1 []string, b1 bool) {
	mm_atomic.AddUint64(&mmGetTopSubjects.beforeGetTopSubjectsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetTopSubjects.afterGetTopSubjectsCounter, 1)

	if mmGetTopSubjects.inspectFuncGetTopSubjects != nil {
		mmGetTopSubjects.inspectFuncGetTopSubjects(topN)
	}

	mm_params := &ServeMockGetTopSubjectsParams{topN}

	// Record call args
	mmGetTopSubjects.GetTopSubjectsMock.mutex.Lock()
	mmGetTopSubjects.GetTopSubjectsMock.callArgs = append(mmGetTopSubjects.GetTopSubjectsMock.callArgs, mm_params)
	mmGetTopSubjects.GetTopSubjectsMock.mutex.Unlock()

	for _, e := range mmGetTopSubjects.GetTopSubjectsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.b1
		}
	}

	if mmGetTopSubjects.GetTopSubjectsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetTopSubjects.GetTopSubjectsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetTopSubjects.GetTopSubjectsMock.defaultExpectation.params
		mm_got := ServeMockGetTopSubjectsParams{topN}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetTopSubjects.t.Errorf("ServeMock.GetTopSubjects got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetTopSubjects.GetTopSubjectsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetTopSubjects.t.Fatal("No results are set for the ServeMock.GetTopSubjects")
		}
		return (*mm_results).sa1, (*mm_results).b1
	}
	if mmGetTopSubjects.funcGetTopSubjects != nil {
		return mmGetTopSubjects.funcGetTopSubjects(topN)
	}
	mmGetTopSubjects.t.Fatalf("Unexpected call to ServeMock.GetTopSubjects. %v", topN)
	return
}

// GetTopSubjectsAfterCounter returns a count of finished ServeMock.GetTopSubjects invocations
func (mmGetTopSubjects *ServeMock) GetTopSubjectsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTopSubjects.afterGetTopSubjectsCounter)
}

// GetTopSubjectsBeforeCounter returns a count of ServeMock.GetTopSubjects invocations
func (mmGetTopSubjects *ServeMock) GetTopSubjectsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTopSubjects.beforeGetTopSubjectsCounter)
}

// Calls returns a list of arguments used in each call to ServeMock.GetTopSubjects.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetTopSubjects *mServeMockGetTopSubjects) Calls() []*ServeMockGetTopSubjectsParams {
	mmGetTopSubjects.mutex.RLock()

	argCopy := make([]*ServeMockGetTopSubjectsParams, len(mmGetTopSubjects.callArgs))
	copy(argCopy, mmGetTopSubjects.callArgs)

	mmGetTopSubjects.mutex.RUnlock()

	return argCopy
}

// MinimockGetTopSubjectsDone returns true if the count of the GetTopSubjects invocations corresponds
// the number of defined expectations
func (m *ServeMock) MinimockGetTopSubjectsDone() bool {
	for _, e := range m.GetTopSubjectsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetTopSubjectsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetTopSubjectsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTopSubjects != nil && mm_atomic.LoadUint64(&m.afterGetTopSubjectsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetTopSubjectsInspect logs each unmet expectation
func (m *ServeMock) MinimockGetTopSubjectsInspect() {
	for _, e := range m.GetTopSubjectsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServeMock.GetTopSubjects with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetTopSubjectsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetTopSubjectsCounter) < 1 {
		if m.GetTopSubjectsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServeMock.GetTopSubjects")
		} else {
			m.t.Errorf("Expected call to ServeMock.GetTopSubjects with params: %#v", *m.GetTopSubjectsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTopSubjects != nil && mm_atomic.LoadUint64(&m.afterGetTopSubjectsCounter) < 1 {
		m.t.Error("Expected call to ServeMock.GetTopSubjects")
	}
}

type mServeMockGetTutorsIDPreferIndividual struct {
	mock               *ServeMock
	defaultExpectation *ServeMockGetTutorsIDPreferIndividualExpectation
	expectations       []*ServeMockGetTutorsIDPreferIndividualExpectation

	callArgs []*ServeMockGetTutorsIDPreferIndividualParams
	mutex    sync.RWMutex
}

// ServeMockGetTutorsIDPreferIndividualExpectation specifies expectation struct of the Serve.GetTutorsIDPreferIndividual
type ServeMockGetTutorsIDPreferIndividualExpectation struct {
	mock    *ServeMock
	params  *ServeMockGetTutorsIDPreferIndividualParams
	results *ServeMockGetTutorsIDPreferIndividualResults
	Counter uint64
}

// ServeMockGetTutorsIDPreferIndividualParams contains parameters of the Serve.GetTutorsIDPreferIndividual
type ServeMockGetTutorsIDPreferIndividualParams struct {
	studentID int64
}

// ServeMockGetTutorsIDPreferIndividualResults contains results of the Serve.GetTutorsIDPreferIndividual
type ServeMockGetTutorsIDPreferIndividualResults struct {
	ia1 []int64
	b1  bool
}

// Expect sets up expected params for Serve.GetTutorsIDPreferIndividual
func (mmGetTutorsIDPreferIndividual *mServeMockGetTutorsIDPreferIndividual) Expect(studentID int64) *mServeMockGetTutorsIDPreferIndividual {
	if mmGetTutorsIDPreferIndividual.mock.funcGetTutorsIDPreferIndividual != nil {
		mmGetTutorsIDPreferIndividual.mock.t.Fatalf("ServeMock.GetTutorsIDPreferIndividual mock is already set by Set")
	}

	if mmGetTutorsIDPreferIndividual.defaultExpectation == nil {
		mmGetTutorsIDPreferIndividual.defaultExpectation = &ServeMockGetTutorsIDPreferIndividualExpectation{}
	}

	mmGetTutorsIDPreferIndividual.defaultExpectation.params = &ServeMockGetTutorsIDPreferIndividualParams{studentID}
	for _, e := range mmGetTutorsIDPreferIndividual.expectations {
		if minimock.Equal(e.params, mmGetTutorsIDPreferIndividual.defaultExpectation.params) {
			mmGetTutorsIDPreferIndividual.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetTutorsIDPreferIndividual.defaultExpectation.params)
		}
	}

	return mmGetTutorsIDPreferIndividual
}

// Inspect accepts an inspector function that has same arguments as the Serve.GetTutorsIDPreferIndividual
func (mmGetTutorsIDPreferIndividual *mServeMockGetTutorsIDPreferIndividual) Inspect(f func(studentID int64)) *mServeMockGetTutorsIDPreferIndividual {
	if mmGetTutorsIDPreferIndividual.mock.inspectFuncGetTutorsIDPreferIndividual != nil {
		mmGetTutorsIDPreferIndividual.mock.t.Fatalf("Inspect function is already set for ServeMock.GetTutorsIDPreferIndividual")
	}

	mmGetTutorsIDPreferIndividual.mock.inspectFuncGetTutorsIDPreferIndividual = f

	return mmGetTutorsIDPreferIndividual
}

// Return sets up results that will be returned by Serve.GetTutorsIDPreferIndividual
func (mmGetTutorsIDPreferIndividual *mServeMockGetTutorsIDPreferIndividual) Return(ia1 []int64, b1 bool) *ServeMock {
	if mmGetTutorsIDPreferIndividual.mock.funcGetTutorsIDPreferIndividual != nil {
		mmGetTutorsIDPreferIndividual.mock.t.Fatalf("ServeMock.GetTutorsIDPreferIndividual mock is already set by Set")
	}

	if mmGetTutorsIDPreferIndividual.defaultExpectation == nil {
		mmGetTutorsIDPreferIndividual.defaultExpectation = &ServeMockGetTutorsIDPreferIndividualExpectation{mock: mmGetTutorsIDPreferIndividual.mock}
	}
	mmGetTutorsIDPreferIndividual.defaultExpectation.results = &ServeMockGetTutorsIDPreferIndividualResults{ia1, b1}
	return mmGetTutorsIDPreferIndividual.mock
}

// Set uses given function f to mock the Serve.GetTutorsIDPreferIndividual method
func (mmGetTutorsIDPreferIndividual *mServeMockGetTutorsIDPreferIndividual) Set(f func(studentID int64) (ia1 []int64, b1 bool)) *ServeMock {
	if mmGetTutorsIDPreferIndividual.defaultExpectation != nil {
		mmGetTutorsIDPreferIndividual.mock.t.Fatalf("Default expectation is already set for the Serve.GetTutorsIDPreferIndividual method")
	}

	if len(mmGetTutorsIDPreferIndividual.expectations) > 0 {
		mmGetTutorsIDPreferIndividual.mock.t.Fatalf("Some expectations are already set for the Serve.GetTutorsIDPreferIndividual method")
	}

	mmGetTutorsIDPreferIndividual.mock.funcGetTutorsIDPreferIndividual = f
	return mmGetTutorsIDPreferIndividual.mock
}

// When sets expectation for the Serve.GetTutorsIDPreferIndividual which will trigger the result defined by the following
// Then helper
func (mmGetTutorsIDPreferIndividual *mServeMockGetTutorsIDPreferIndividual) When(studentID int64) *ServeMockGetTutorsIDPreferIndividualExpectation {
	if mmGetTutorsIDPreferIndividual.mock.funcGetTutorsIDPreferIndividual != nil {
		mmGetTutorsIDPreferIndividual.mock.t.Fatalf("ServeMock.GetTutorsIDPreferIndividual mock is already set by Set")
	}

	expectation := &ServeMockGetTutorsIDPreferIndividualExpectation{
		mock:   mmGetTutorsIDPreferIndividual.mock,
		params: &ServeMockGetTutorsIDPreferIndividualParams{studentID},
	}
	mmGetTutorsIDPreferIndividual.expectations = append(mmGetTutorsIDPreferIndividual.expectations, expectation)
	return expectation
}

// Then sets up Serve.GetTutorsIDPreferIndividual return parameters for the expectation previously defined by the When method
func (e *ServeMockGetTutorsIDPreferIndividualExpectation) Then(ia1 []int64, b1 bool) *ServeMock {
	e.results = &ServeMockGetTutorsIDPreferIndividualResults{ia1, b1}
	return e.mock
}

// GetTutorsIDPreferIndividual implements Serve
func (mmGetTutorsIDPreferIndividual *ServeMock) GetTutorsIDPreferIndividual(studentID int64) (ia1 []int64, b1 bool) {
	mm_atomic.AddUint64(&mmGetTutorsIDPreferIndividual.beforeGetTutorsIDPreferIndividualCounter, 1)
	defer mm_atomic.AddUint64(&mmGetTutorsIDPreferIndividual.afterGetTutorsIDPreferIndividualCounter, 1)

	if mmGetTutorsIDPreferIndividual.inspectFuncGetTutorsIDPreferIndividual != nil {
		mmGetTutorsIDPreferIndividual.inspectFuncGetTutorsIDPreferIndividual(studentID)
	}

	mm_params := &ServeMockGetTutorsIDPreferIndividualParams{studentID}

	// Record call args
	mmGetTutorsIDPreferIndividual.GetTutorsIDPreferIndividualMock.mutex.Lock()
	mmGetTutorsIDPreferIndividual.GetTutorsIDPreferIndividualMock.callArgs = append(mmGetTutorsIDPreferIndividual.GetTutorsIDPreferIndividualMock.callArgs, mm_params)
	mmGetTutorsIDPreferIndividual.GetTutorsIDPreferIndividualMock.mutex.Unlock()

	for _, e := range mmGetTutorsIDPreferIndividual.GetTutorsIDPreferIndividualMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ia1, e.results.b1
		}
	}

	if mmGetTutorsIDPreferIndividual.GetTutorsIDPreferIndividualMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetTutorsIDPreferIndividual.GetTutorsIDPreferIndividualMock.defaultExpectation.Counter, 1)
		mm_want := mmGetTutorsIDPreferIndividual.GetTutorsIDPreferIndividualMock.defaultExpectation.params
		mm_got := ServeMockGetTutorsIDPreferIndividualParams{studentID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetTutorsIDPreferIndividual.t.Errorf("ServeMock.GetTutorsIDPreferIndividual got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetTutorsIDPreferIndividual.GetTutorsIDPreferIndividualMock.defaultExpectation.results
		if mm_results == nil {
			mmGetTutorsIDPreferIndividual.t.Fatal("No results are set for the ServeMock.GetTutorsIDPreferIndividual")
		}
		return (*mm_results).ia1, (*mm_results).b1
	}
	if mmGetTutorsIDPreferIndividual.funcGetTutorsIDPreferIndividual != nil {
		return mmGetTutorsIDPreferIndividual.funcGetTutorsIDPreferIndividual(studentID)
	}
	mmGetTutorsIDPreferIndividual.t.Fatalf("Unexpected call to ServeMock.GetTutorsIDPreferIndividual. %v", studentID)
	return
}

// GetTutorsIDPreferIndividualAfterCounter returns a count of finished ServeMock.GetTutorsIDPreferIndividual invocations
func (mmGetTutorsIDPreferIndividual *ServeMock) GetTutorsIDPreferIndividualAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTutorsIDPreferIndividual.afterGetTutorsIDPreferIndividualCounter)
}

// GetTutorsIDPreferIndividualBeforeCounter returns a count of ServeMock.GetTutorsIDPreferIndividual invocations
func (mmGetTutorsIDPreferIndividual *ServeMock) GetTutorsIDPreferIndividualBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTutorsIDPreferIndividual.beforeGetTutorsIDPreferIndividualCounter)
}

// Calls returns a list of arguments used in each call to ServeMock.GetTutorsIDPreferIndividual.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetTutorsIDPreferIndividual *mServeMockGetTutorsIDPreferIndividual) Calls() []*ServeMockGetTutorsIDPreferIndividualParams {
	mmGetTutorsIDPreferIndividual.mutex.RLock()

	argCopy := make([]*ServeMockGetTutorsIDPreferIndividualParams, len(mmGetTutorsIDPreferIndividual.callArgs))
	copy(argCopy, mmGetTutorsIDPreferIndividual.callArgs)

	mmGetTutorsIDPreferIndividual.mutex.RUnlock()

	return argCopy
}

// MinimockGetTutorsIDPreferIndividualDone returns true if the count of the GetTutorsIDPreferIndividual invocations corresponds
// the number of defined expectations
func (m *ServeMock) MinimockGetTutorsIDPreferIndividualDone() bool {
	for _, e := range m.GetTutorsIDPreferIndividualMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetTutorsIDPreferIndividualMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetTutorsIDPreferIndividualCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTutorsIDPreferIndividual != nil && mm_atomic.LoadUint64(&m.afterGetTutorsIDPreferIndividualCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetTutorsIDPreferIndividualInspect logs each unmet expectation
func (m *ServeMock) MinimockGetTutorsIDPreferIndividualInspect() {
	for _, e := range m.GetTutorsIDPreferIndividualMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServeMock.GetTutorsIDPreferIndividual with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetTutorsIDPreferIndividualMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetTutorsIDPreferIndividualCounter) < 1 {
		if m.GetTutorsIDPreferIndividualMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServeMock.GetTutorsIDPreferIndividual")
		} else {
			m.t.Errorf("Expected call to ServeMock.GetTutorsIDPreferIndividual with params: %#v", *m.GetTutorsIDPreferIndividualMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTutorsIDPreferIndividual != nil && mm_atomic.LoadUint64(&m.afterGetTutorsIDPreferIndividualCounter) < 1 {
		m.t.Error("Expected call to ServeMock.GetTutorsIDPreferIndividual")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ServeMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetTopSubjectsInspect()

		m.MinimockGetTutorsIDPreferIndividualInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ServeMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ServeMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetTopSubjectsDone() &&
		m.MinimockGetTutorsIDPreferIndividualDone()
}
