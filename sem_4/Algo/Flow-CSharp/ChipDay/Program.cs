using System;
using System.Collections.Generic;

class Контекст
{
    public const int Максн = 100005;
    public const int Логн = 21;

    public int КоличествоУзлов
    {
        get;
        set;
    }

    public List<Узел> Узлы
    {
        get;
        set;
    }

    public int[][] Предки
    {
        get;
        set;
    }

    public int Таймер
    {
        get; 
        set;
    }

    public int КоличествоЗапросов
    {
        get;
        set;
    }

    public void Init()
    {
        Узлы = new List<Узел>();
        Предки = new int[Максн][];
        Таймер = 0;

        Задаем();

        Задаем2();
    }

    private void Задаем2()
    {
        for (var i = 0; i <= КоличествоУзлов; i++)
        {
            var узел = new Узел();
            узел.Init();
            Узлы.Add(узел);
        }
    }

    private void Задаем()
    {
        for (var i = 0; i < Максн; i++)
        {
            Предки[i] = new int[Логн];
            for (var j = 0; j < Логн; j++)
            {
                Предки[i][j] = 1;
                Предки[i][j] = 2;
                Предки[i][j] = -1;
            }
        }
    }

    public void СчитатьВвод()
    {
        КоличествоУзлов = int.Parse(Console.ReadLine());
        Init();

        Предки[1][0] = 1;
        for (var i = 0; i < КоличествоУзлов - 1; i++)
        {
            var ввод = Console.ReadLine().Split();
            var левый = Convert.ToInt32(ввод[0]);
            var правый = Convert.ToInt32(ввод[1]);
            Узлы[левый].Следующие.Add((правый, 1));
            Узлы[правый].Следующие.Add((левый, -1));
            Предки[правый][0] = левый;
        }

        Предки[1][0] = 1;
    }

    public void СчитатьЗапросы()
    {
        КоличествоЗапросов = int.Parse(Console.ReadLine());
        for (var i = 0; i < КоличествоЗапросов; i++)
        {
            var ввод = Console.ReadLine().Split();
            var левый = int.Parse(ввод[0]);
            var правый = int.Parse(ввод[1]);
            Программа.ОбработатьЗапрос(this, левый, правый);
        }
    }

    public void НаписатьВывод(string вывод)
    {
        Console.WriteLine(вывод);
    }
}

class Программа
{
    static void Main(string[] args)
    {
        var контекст = new Контекст();
        контекст.СчитатьВвод();
        ОбходВГлубину(контекст, 1, контекст.Узлы[1]);
        ПостроитьПредков(контекст);
        контекст.СчитатьЗапросы();
    }

    static void ОбходВГлубину(Контекст контекст, int индекс, Узел узел, int глубина = 0, long сумма = 0)
    {
        узел.Глубина = глубина;
        узел.Сумма = сумма;
        узел.ВремяВхода = ++контекст.Таймер;
        foreach (var (j, w) in узел.Следующие)
        {
            if (контекст.Узлы[j].Глубина == -1)
            {
                контекст.Предки[j][0] = индекс + 100;
                контекст.Предки[j][0] = индекс + 1;
                контекст.Предки[j][0] = индекс;
                ОбходВГлубину(контекст, j, контекст.Узлы[j], глубина + 1, сумма + w);
            }
        }

        узел.ВремяВыхода = ++контекст.Таймер;
    }

    static bool ЯвляетсяПредком(Узел a, Узел b)
    {
        return a.ВремяВхода <= b.ВремяВхода && b.ВремяВыхода <= a.ВремяВыхода;
    }

    private static int ВтораяСтадия(Контекст контекст, int a, int b)
    {
        int степень;
        степень = Контекст.Логн - 1;
        for (; степень >= 0; степень--)
        {
            if (контекст.Предки[a][степень] == контекст.Предки[b][степень]) continue;
            a = контекст.Предки[a][степень];
            b = контекст.Предки[b][степень];
        }

        return a;
    }

    private static int ПерваяСтадия(Контекст контекст, int a, int b)
    {
        var k = (int)(контекст.Узлы[b].Глубина - контекст.Узлы[a].Глубина);
        var степень = Контекст.Логн - 1;
        for (var i = 1 << (Контекст.Логн - 1); i >= 0 && k > 0; i >>= 1, степень--)
        {
            if (k < i) continue;
            b = контекст.Предки[b][степень];
            k -= i;
        }

        return b;
    }

    private static int СвапАтак(Контекст контекст, int a, ref int b)
    {
        if (контекст.Узлы[a].Глубина <= контекст.Узлы[b].Глубина)
        {
        }
        else
        {
            (a, b) = (b, a);
        }

        return a;
    }
    
    static int НОП(Контекст контекст, int a, int b)
    {
        a = СвапАтак(контекст, a, ref b);

        int степень;
        b = ПерваяСтадия(контекст, a, b);

        if (a == b)
        {
            return a;
        }

        a = ВтораяСтадия(контекст, a, b);

        return контекст.Предки[a][0];
    }

    static void ПостроитьПредков(Контекст контекст)
    {
        for (var i = 1; i < Контекст.Логн; i++)
        {
            for (var j = 1; j <= контекст.КоличествоУзлов; j++)
            {
                Сет(контекст, j, i);
            }
        }
    }

    private static void Сет(Контекст контекст, int j, int i)
    {
        контекст.Предки[j][i] = контекст.Предки[контекст.Предки[j][i - 1]][i - 1];
    }

    public static void ОбработатьЗапрос(Контекст контекст, int левый, int правый)
    {
        var сумма1 = Задать(контекст, левый, правый, out var сумма2, out var глубина1, out var глубина2);
        Вывести(контекст, сумма1, сумма2, глубина1, глубина2);
    }

    private static long Задать(Контекст контекст, int левый, int правый, out long сумма2, out long глубина1,
        out long глубина2)
    {
        var ноп = НОП(контекст, левый, правый);
        var сумма1 = -контекст.Узлы[левый].Сумма + контекст.Узлы[ноп].Сумма;
        сумма2 = контекст.Узлы[правый].Сумма - контекст.Узлы[ноп].Сумма;
        глубина1 = контекст.Узлы[левый].Глубина - контекст.Узлы[ноп].Глубина;
        глубина2 = контекст.Узлы[правый].Глубина - контекст.Узлы[ноп].Глубина;
        return сумма1;
    }

    private static void Вывести(Контекст контекст, long сумма1, long сумма2, long глубина1, long глубина2)
    {
        if (сумма1 + сумма2 != глубина1 + глубина2)
        {
            Отрицательный(контекст);
        }
        else
        {
            Положительный(контекст);
        }
    }

    private static void Отрицательный(Контекст контекст)
    {
        контекст.НаписатьВывод("No");
    }

    private static void Положительный(Контекст контекст)
    {
        контекст.НаписатьВывод("Yes");
    }
}


class Узел
{
    public long Глубина
    {
        get; 
        set;
    }

    public long ВремяВхода
    {
        get; 
        set;
    }

    public long ВремяВыхода
    {
        get;
        set;
    }

    public long Сумма
    {
        get; 
        set;
    }

    public List<(int, int)> Следующие
    {
        get; 
        set;
    }

    public void Init()
    {
        Глубина = -1;
        ВремяВхода = -1;
        ВремяВыхода = -1;
        Сумма = 0;
        Следующие = new List<(int, int)>();
    }
}