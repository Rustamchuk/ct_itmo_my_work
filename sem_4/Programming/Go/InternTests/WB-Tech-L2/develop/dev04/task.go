package main

import (
	"sort"
	"strings"
)

/*
=== Поиск анаграмм по словарю ===

Напишите функцию поиска всех множеств анаграмм по словарю.
Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.

Входные данные для функции: ссылка на массив - каждый элемент которого - слово на русском языке в кодировке utf8.
Выходные данные: Ссылка на мапу множеств анаграмм.
Ключ - первое встретившееся в словаре слово из множества
Значение - ссылка на массив, каждый элемент которого, слово из множества. Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.

Программа должна проходить все тесты. Код должен проходить проверки go vet и golint.
*/

func main() {
	/*
			За идею взял алгоритм хэширования в мапе. Делаю то же самое,
		но в мапе мы зависим от расположения символа, что убирает колизии, а мне как раз нужны колизии,
		поэтому мой алгоритм будет умнажать на конкретную константу код символа,
		в итоге анаграммы будут иметь одинаковый хэш
	*/
	words := []string{"пятак", "пятка", "тяпка", "листок", "слиток", "столик", "слово"}

	// Метод поиска анаграмм
	anagrams := findAnagrams(&words)

	// Вывод
	for key, group := range anagrams {
		println(key, ":", strings.Join(*group, ", "))
	}
}

// Метод поиска анаграмм
func findAnagrams(words *[]string) map[string]*[]string {
	var (
		seen       = make(map[string]struct{})  // Мапа для уникальных
		anagramMap = make(map[int][]string)     // Мапа анаграмм по хэшу
		result     = make(map[string]*[]string) // Отсортированная мапа анаграмм по представителю
	)

	// Перебираем слова
	for _, word := range *words {
		lowerWord := strings.ToLower(word) // В нижний регистр

		if _, ok := seen[word]; ok {
			continue // Уже видели, пропуск
		}
		seen[word] = struct{}{} // Запоминаем для уникальности

		hash := getAnagramHash(lowerWord)                      // Получаем хэш
		anagramMap[hash] = append(anagramMap[hash], lowerWord) // Кладем в свое множество
	}

	// Удаление множеств с одним элементом и выбор ключа
	for _, words := range anagramMap {
		if len(words) > 1 {
			sort.Strings(words)
			result[(words)[0]] = &words
		}
	}

	return result
}

// Метод хэширования для анаграмм
func getAnagramHash(word string) int {
	const base = 257 // Простое число как база для хеширования
	hash := 0
	for _, char := range word {
		// Приведение символа к числу и умножение на базу для уникальности
		hash += int(char) * base
	}
	return hash
}
