// Code generated by MockGen. DO NOT EDIT.
// Source: adapters.go

// Package adapters is a generated GoMock package.
package adapters

import (
	context "context"
	domain "homework/internal/domain"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockEventUsecase is a mock of EventUsecase interface.
type MockEventUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEventUsecaseMockRecorder
}

// MockEventUsecaseMockRecorder is the mock recorder for MockEventUsecase.
type MockEventUsecaseMockRecorder struct {
	mock *MockEventUsecase
}

// NewMockEventUsecase creates a new mock instance.
func NewMockEventUsecase(ctrl *gomock.Controller) *MockEventUsecase {
	mock := &MockEventUsecase{ctrl: ctrl}
	mock.recorder = &MockEventUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventUsecase) EXPECT() *MockEventUsecaseMockRecorder {
	return m.recorder
}

// GetLastEventBySensorID mocks base method.
func (m *MockEventUsecase) GetLastEventBySensorID(ctx context.Context, id int64) (*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastEventBySensorID", ctx, id)
	ret0, _ := ret[0].(*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastEventBySensorID indicates an expected call of GetLastEventBySensorID.
func (mr *MockEventUsecaseMockRecorder) GetLastEventBySensorID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEventBySensorID", reflect.TypeOf((*MockEventUsecase)(nil).GetLastEventBySensorID), ctx, id)
}

// GetSensorHistory mocks base method.
func (m *MockEventUsecase) GetSensorHistory(ctx context.Context, id int64, st, fn time.Time) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensorHistory", ctx, id, st, fn)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSensorHistory indicates an expected call of GetSensorHistory.
func (mr *MockEventUsecaseMockRecorder) GetSensorHistory(ctx, id, st, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensorHistory", reflect.TypeOf((*MockEventUsecase)(nil).GetSensorHistory), ctx, id, st, fn)
}

// ReceiveEvent mocks base method.
func (m *MockEventUsecase) ReceiveEvent(ctx context.Context, event *domain.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReceiveEvent indicates an expected call of ReceiveEvent.
func (mr *MockEventUsecaseMockRecorder) ReceiveEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveEvent", reflect.TypeOf((*MockEventUsecase)(nil).ReceiveEvent), ctx, event)
}

// MockSensorUsecase is a mock of SensorUsecase interface.
type MockSensorUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSensorUsecaseMockRecorder
}

// MockSensorUsecaseMockRecorder is the mock recorder for MockSensorUsecase.
type MockSensorUsecaseMockRecorder struct {
	mock *MockSensorUsecase
}

// NewMockSensorUsecase creates a new mock instance.
func NewMockSensorUsecase(ctrl *gomock.Controller) *MockSensorUsecase {
	mock := &MockSensorUsecase{ctrl: ctrl}
	mock.recorder = &MockSensorUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSensorUsecase) EXPECT() *MockSensorUsecaseMockRecorder {
	return m.recorder
}

// GetSensorByID mocks base method.
func (m *MockSensorUsecase) GetSensorByID(ctx context.Context, id int64) (*domain.Sensor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensorByID", ctx, id)
	ret0, _ := ret[0].(*domain.Sensor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSensorByID indicates an expected call of GetSensorByID.
func (mr *MockSensorUsecaseMockRecorder) GetSensorByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensorByID", reflect.TypeOf((*MockSensorUsecase)(nil).GetSensorByID), ctx, id)
}

// GetSensors mocks base method.
func (m *MockSensorUsecase) GetSensors(ctx context.Context) ([]domain.Sensor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensors", ctx)
	ret0, _ := ret[0].([]domain.Sensor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSensors indicates an expected call of GetSensors.
func (mr *MockSensorUsecaseMockRecorder) GetSensors(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensors", reflect.TypeOf((*MockSensorUsecase)(nil).GetSensors), ctx)
}

// RegisterSensor mocks base method.
func (m *MockSensorUsecase) RegisterSensor(ctx context.Context, sensor *domain.Sensor) (*domain.Sensor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSensor", ctx, sensor)
	ret0, _ := ret[0].(*domain.Sensor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSensor indicates an expected call of RegisterSensor.
func (mr *MockSensorUsecaseMockRecorder) RegisterSensor(ctx, sensor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSensor", reflect.TypeOf((*MockSensorUsecase)(nil).RegisterSensor), ctx, sensor)
}

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// AttachSensorToUser mocks base method.
func (m *MockUserUsecase) AttachSensorToUser(ctx context.Context, userID, sensorID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachSensorToUser", ctx, userID, sensorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachSensorToUser indicates an expected call of AttachSensorToUser.
func (mr *MockUserUsecaseMockRecorder) AttachSensorToUser(ctx, userID, sensorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachSensorToUser", reflect.TypeOf((*MockUserUsecase)(nil).AttachSensorToUser), ctx, userID, sensorID)
}

// GetUserSensors mocks base method.
func (m *MockUserUsecase) GetUserSensors(ctx context.Context, userID int64) ([]domain.Sensor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSensors", ctx, userID)
	ret0, _ := ret[0].([]domain.Sensor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSensors indicates an expected call of GetUserSensors.
func (mr *MockUserUsecaseMockRecorder) GetUserSensors(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSensors", reflect.TypeOf((*MockUserUsecase)(nil).GetUserSensors), ctx, userID)
}

// RegisterUser mocks base method.
func (m *MockUserUsecase) RegisterUser(ctx context.Context, user *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, user)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserUsecaseMockRecorder) RegisterUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserUsecase)(nil).RegisterUser), ctx, user)
}
