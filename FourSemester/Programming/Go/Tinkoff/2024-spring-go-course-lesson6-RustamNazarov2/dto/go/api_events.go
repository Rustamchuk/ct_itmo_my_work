// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * API умного дома
 *
 * Интерфейс управления и мониторинга устройствами умного дома
 *
 * API version: 0.1
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// EventsAPIController binds http requests to an api service and writes the service results to the http response
type EventsAPIController struct {
	service EventsAPIServicer
	errorHandler ErrorHandler
}

// EventsAPIOption for how the controller is set up.
type EventsAPIOption func(*EventsAPIController)

// WithEventsAPIErrorHandler inject ErrorHandler into controller
func WithEventsAPIErrorHandler(h ErrorHandler) EventsAPIOption {
	return func(c *EventsAPIController) {
		c.errorHandler = h
	}
}

// NewEventsAPIController creates a default api controller
func NewEventsAPIController(s EventsAPIServicer, opts ...EventsAPIOption) Router {
	controller := &EventsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the EventsAPIController
func (c *EventsAPIController) Routes() Routes {
	return Routes{
		"EventsOptions": Route{
			strings.ToUpper("Options"),
			"/events",
			c.EventsOptions,
		},
		"RegisterEvent": Route{
			strings.ToUpper("Post"),
			"/events",
			c.RegisterEvent,
		},
	}
}

// EventsOptions - Получение доступных методов
func (c *EventsAPIController) EventsOptions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.EventsOptions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RegisterEvent - Регистрация события от датчика
func (c *EventsAPIController) RegisterEvent(w http.ResponseWriter, r *http.Request) {
	bodyParam := SensorEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSensorEventRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSensorEventConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RegisterEvent(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
