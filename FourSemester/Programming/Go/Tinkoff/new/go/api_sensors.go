// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * API умного дома
 *
 * Интерфейс управления и мониторинга устройствами умного дома
 *
 * API version: 0.1
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// SensorsAPIController binds http requests to an api service and writes the service results to the http response
type SensorsAPIController struct {
	service SensorsAPIServicer
	errorHandler ErrorHandler
}

// SensorsAPIOption for how the controller is set up.
type SensorsAPIOption func(*SensorsAPIController)

// WithSensorsAPIErrorHandler inject ErrorHandler into controller
func WithSensorsAPIErrorHandler(h ErrorHandler) SensorsAPIOption {
	return func(c *SensorsAPIController) {
		c.errorHandler = h
	}
}

// NewSensorsAPIController creates a default api controller
func NewSensorsAPIController(s SensorsAPIServicer, opts ...SensorsAPIOption) Router {
	controller := &SensorsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SensorsAPIController
func (c *SensorsAPIController) Routes() Routes {
	return Routes{
		"GetSensor": Route{
			strings.ToUpper("Get"),
			"/sensors/{sensor_id}",
			c.GetSensor,
		},
		"GetSensors": Route{
			strings.ToUpper("Get"),
			"/sensors",
			c.GetSensors,
		},
		"HeadSensor": Route{
			strings.ToUpper("Head"),
			"/sensors/{sensor_id}",
			c.HeadSensor,
		},
		"HeadSensors": Route{
			strings.ToUpper("Head"),
			"/sensors",
			c.HeadSensors,
		},
		"RegisterSensor": Route{
			strings.ToUpper("Post"),
			"/sensors",
			c.RegisterSensor,
		},
		"SensorOptions": Route{
			strings.ToUpper("Options"),
			"/sensors/{sensor_id}",
			c.SensorOptions,
		},
		"SensorsOptions": Route{
			strings.ToUpper("Options"),
			"/sensors",
			c.SensorsOptions,
		},
	}
}

// GetSensor - Получение датчика
func (c *SensorsAPIController) GetSensor(w http.ResponseWriter, r *http.Request) {
	sensorId, err := EncodeURLRequest(w, r, "sensor_id")
	if err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetSensor(r.Context(), sensorId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSensors - Получение всех датчиков
func (c *SensorsAPIController) GetSensors(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetSensors(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadSensor - Запрос заголовков
func (c *SensorsAPIController) HeadSensor(w http.ResponseWriter, r *http.Request) {
	sensorId, err := EncodeURLRequest(w, r, "sensor_id")
	if err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.HeadSensor(r.Context(), sensorId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadSensors - Запрос заголовков
func (c *SensorsAPIController) HeadSensors(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HeadSensors(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RegisterSensor - Регистрация датчика
func (c *SensorsAPIController) RegisterSensor(w http.ResponseWriter, r *http.Request) {
	bodyParam := SensorToCreate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSensorToCreateRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSensorToCreateConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RegisterSensor(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SensorOptions - Получение доступных методов
func (c *SensorsAPIController) SensorOptions(w http.ResponseWriter, r *http.Request) {
	sensorId, err := EncodeURLRequest(w, r, "sensor_id")
	if err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SensorOptions(r.Context(), sensorId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SensorsOptions - Получение доступных методов
func (c *SensorsAPIController) SensorsOptions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SensorsOptions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
