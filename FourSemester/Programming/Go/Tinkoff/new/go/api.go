// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * API умного дома
 *
 * Интерфейс управления и мониторинга устройствами умного дома
 *
 * API version: 0.1
 */

package openapi

import (
	"context"
	"net/http"
)



// EventsAPIRouter defines the required methods for binding the api requests to a responses for the EventsAPI
// The EventsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EventsAPIServicer to perform the required actions, then write the service results to the http response.
type EventsAPIRouter interface { 
	EventsOptions(http.ResponseWriter, *http.Request)
	RegisterEvent(http.ResponseWriter, *http.Request)
}
// SensorsAPIRouter defines the required methods for binding the api requests to a responses for the SensorsAPI
// The SensorsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SensorsAPIServicer to perform the required actions, then write the service results to the http response.
type SensorsAPIRouter interface { 
	GetSensor(http.ResponseWriter, *http.Request)
	GetSensors(http.ResponseWriter, *http.Request)
	HeadSensor(http.ResponseWriter, *http.Request)
	HeadSensors(http.ResponseWriter, *http.Request)
	RegisterSensor(http.ResponseWriter, *http.Request)
	SensorOptions(http.ResponseWriter, *http.Request)
	SensorsOptions(http.ResponseWriter, *http.Request)
}
// UsersAPIRouter defines the required methods for binding the api requests to a responses for the UsersAPI
// The UsersAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UsersAPIServicer to perform the required actions, then write the service results to the http response.
type UsersAPIRouter interface { 
	BindSensorToUser(http.ResponseWriter, *http.Request)
	CreateUser(http.ResponseWriter, *http.Request)
	GetUserSensors(http.ResponseWriter, *http.Request)
	HeadUserSensors(http.ResponseWriter, *http.Request)
	UsersOptions(http.ResponseWriter, *http.Request)
	UsersSensorsOptions(http.ResponseWriter, *http.Request)
}


// EventsAPIServicer defines the api actions for the EventsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EventsAPIServicer interface { 
	EventsOptions(context.Context) (ImplResponse, error)
	RegisterEvent(context.Context, SensorEvent) (ImplResponse, error)
}


// SensorsAPIServicer defines the api actions for the SensorsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SensorsAPIServicer interface { 
	GetSensor(context.Context, int64) (ImplResponse, error)
	GetSensors(context.Context) (ImplResponse, error)
	HeadSensor(context.Context, int64) (ImplResponse, error)
	HeadSensors(context.Context) (ImplResponse, error)
	RegisterSensor(context.Context, SensorToCreate) (ImplResponse, error)
	SensorOptions(context.Context, int64) (ImplResponse, error)
	SensorsOptions(context.Context) (ImplResponse, error)
}


// UsersAPIServicer defines the api actions for the UsersAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UsersAPIServicer interface { 
	BindSensorToUser(context.Context, int64, SensorToUserBinding) (ImplResponse, error)
	CreateUser(context.Context, UserToCreate) (ImplResponse, error)
	GetUserSensors(context.Context, int64) (ImplResponse, error)
	HeadUserSensors(context.Context, int64) (ImplResponse, error)
	UsersOptions(context.Context) (ImplResponse, error)
	UsersSensorsOptions(context.Context, int64) (ImplResponse, error)
}
