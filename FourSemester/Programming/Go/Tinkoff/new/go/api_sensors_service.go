// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * API умного дома
 *
 * Интерфейс управления и мониторинга устройствами умного дома
 *
 * API version: 0.1
 */

package openapi

import (
	"context"
	"net/http"
	"errors"
)

// SensorsAPIService is a service that implements the logic for the SensorsAPIServicer
// This service should implement the business logic for every endpoint for the SensorsAPI API.
// Include any external packages or services that will be required by this service.
type SensorsAPIService struct {
}

// NewSensorsAPIService creates a default api service
func NewSensorsAPIService() SensorsAPIServicer {
	return &SensorsAPIService{}
}

// GetSensor - Получение датчика
func (s *SensorsAPIService) GetSensor(ctx context.Context, sensorId int64) (ImplResponse, error) {
	// TODO - update GetSensor with the required logic for this service method.
	// Add api_sensors_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Sensor{}) or use other options such as http.Ok ...
	// return Response(200, Sensor{}), nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	// TODO: Uncomment the next line to return response Response(422, {}) or use other options such as http.Ok ...
	// return Response(422, nil),nil

	// TODO: Uncomment the next line to return response Response(406, {}) or use other options such as http.Ok ...
	// return Response(406, nil),nil

	// TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	// return Response(0, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetSensor method not implemented")
}

// GetSensors - Получение всех датчиков
func (s *SensorsAPIService) GetSensors(ctx context.Context) (ImplResponse, error) {
	// TODO - update GetSensors with the required logic for this service method.
	// Add api_sensors_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, []Sensor{}) or use other options such as http.Ok ...
	// return Response(200, []Sensor{}), nil

	// TODO: Uncomment the next line to return response Response(406, {}) or use other options such as http.Ok ...
	// return Response(406, nil),nil

	// TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	// return Response(0, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetSensors method not implemented")
}

// HeadSensor - Запрос заголовков
func (s *SensorsAPIService) HeadSensor(ctx context.Context, sensorId int64) (ImplResponse, error) {
	// TODO - update HeadSensor with the required logic for this service method.
	// Add api_sensors_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	// return Response(200, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	// TODO: Uncomment the next line to return response Response(422, {}) or use other options such as http.Ok ...
	// return Response(422, nil),nil

	// TODO: Uncomment the next line to return response Response(406, {}) or use other options such as http.Ok ...
	// return Response(406, nil),nil

	// TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	// return Response(0, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("HeadSensor method not implemented")
}

// HeadSensors - Запрос заголовков
func (s *SensorsAPIService) HeadSensors(ctx context.Context) (ImplResponse, error) {
	// TODO - update HeadSensors with the required logic for this service method.
	// Add api_sensors_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	// return Response(200, nil),nil

	// TODO: Uncomment the next line to return response Response(406, {}) or use other options such as http.Ok ...
	// return Response(406, nil),nil

	// TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	// return Response(0, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("HeadSensors method not implemented")
}

// RegisterSensor - Регистрация датчика
func (s *SensorsAPIService) RegisterSensor(ctx context.Context, body SensorToCreate) (ImplResponse, error) {
	// TODO - update RegisterSensor with the required logic for this service method.
	// Add api_sensors_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Sensor{}) or use other options such as http.Ok ...
	// return Response(200, Sensor{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(415, {}) or use other options such as http.Ok ...
	// return Response(415, nil),nil

	// TODO: Uncomment the next line to return response Response(422, Error{}) or use other options such as http.Ok ...
	// return Response(422, Error{}), nil

	// TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	// return Response(0, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("RegisterSensor method not implemented")
}

// SensorOptions - Получение доступных методов
func (s *SensorsAPIService) SensorOptions(ctx context.Context, sensorId int64) (ImplResponse, error) {
	// TODO - update SensorOptions with the required logic for this service method.
	// Add api_sensors_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, {}) or use other options such as http.Ok ...
	// return Response(204, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("SensorOptions method not implemented")
}

// SensorsOptions - Получение доступных методов
func (s *SensorsAPIService) SensorsOptions(ctx context.Context) (ImplResponse, error) {
	// TODO - update SensorsOptions with the required logic for this service method.
	// Add api_sensors_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, {}) or use other options such as http.Ok ...
	// return Response(204, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("SensorsOptions method not implemented")
}
