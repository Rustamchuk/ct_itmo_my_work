// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * API умного дома
 *
 * Интерфейс управления и мониторинга устройствами умного дома
 *
 * API version: 0.1
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// UsersAPIController binds http requests to an api service and writes the service results to the http response
type UsersAPIController struct {
	service      UsersAPIServicer
	errorHandler ErrorHandler
}

// UsersAPIOption for how the controller is set up.
type UsersAPIOption func(*UsersAPIController)

// WithUsersAPIErrorHandler inject ErrorHandler into controller
func WithUsersAPIErrorHandler(h ErrorHandler) UsersAPIOption {
	return func(c *UsersAPIController) {
		c.errorHandler = h
	}
}

// NewUsersAPIController creates a default api controller
func NewUsersAPIController(s UsersAPIServicer, opts ...UsersAPIOption) Router {
	controller := &UsersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UsersAPIController
func (c *UsersAPIController) Routes() Routes {
	return Routes{
		"BindSensorToUser": Route{
			strings.ToUpper("Post"),
			"/users/{user_id}/sensors",
			c.BindSensorToUser,
		},
		"CreateUser": Route{
			strings.ToUpper("Post"),
			"/users",
			c.CreateUser,
		},
		"GetUserSensors": Route{
			strings.ToUpper("Get"),
			"/users/{user_id}/sensors",
			c.GetUserSensors,
		},
		"HeadUserSensors": Route{
			strings.ToUpper("Head"),
			"/users/{user_id}/sensors",
			c.HeadUserSensors,
		},
		"UsersOptions": Route{
			strings.ToUpper("Options"),
			"/users",
			c.UsersOptions,
		},
		"UsersSensorsOptions": Route{
			strings.ToUpper("Options"),
			"/users/{user_id}/sensors",
			c.UsersSensorsOptions,
		},
	}
}

// BindSensorToUser - Привязка датчика к пользователю
func (c *UsersAPIController) BindSensorToUser(w http.ResponseWriter, r *http.Request) {
	userId, err := EncodeURLRequest(w, r, "user_id")
	if err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := SensorToUserBinding{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSensorToUserBindingRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSensorToUserBindingConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, &RequiredError{Field: err.Error()}, nil)
		return
	}
	result, err := c.service.BindSensorToUser(r.Context(), userId, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateUser - Создание пользователя
func (c *UsersAPIController) CreateUser(w http.ResponseWriter, r *http.Request) {
	bodyParam := UserToCreate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserToCreateRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserToCreateConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateUser(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserSensors - Получений датчиков пользователя
func (c *UsersAPIController) GetUserSensors(w http.ResponseWriter, r *http.Request) {
	userId, err := EncodeURLRequest(w, r, "user_id")
	if err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetUserSensors(r.Context(), userId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadUserSensors - Запрос заголовков
func (c *UsersAPIController) HeadUserSensors(w http.ResponseWriter, r *http.Request) {
	userId, err := EncodeURLRequest(w, r, "user_id")
	if err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.HeadUserSensors(r.Context(), userId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersOptions - Получение доступных методов
func (c *UsersAPIController) UsersOptions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UsersOptions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersSensorsOptions - Получение доступных методов
func (c *UsersAPIController) UsersSensorsOptions(w http.ResponseWriter, r *http.Request) {
	userId, err := EncodeURLRequest(w, r, "user_id")
	if err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UsersSensorsOptions(r.Context(), userId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
