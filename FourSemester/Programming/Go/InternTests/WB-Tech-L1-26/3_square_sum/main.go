package main

import (
	"fmt"
	"sync"
)

/*
Дана последовательность чисел: 2,4,6,8,10.
Найти сумму их квадратов(2^2+3^2+4^2….)
с использованием конкурентных вычислений.
*/

func main() {
	var (
		sum        int                         // Переменная суммы
		wg         sync.WaitGroup              // WaitGroup, чтобы знать, когда все подсчеты закончатся
		nums       = []int{2, 4, 6, 8, 10}     // Слайс чисел
		squareChan = make(chan int, len(nums)) // Буферизированный канал для результатов
	)

	// Для каждого числа в массиве создаем свою горутину по подсчету квадратов
	for _, num := range nums {
		wg.Add(1) // Увеличиваем WaitGroup +1 процесс
		go func(a int) { // Просим положить аргумент, иначе num может поменяться
			defer wg.Done()     // По окончании метода WaitGroup -1 процесс
			squareChan <- a * a // Кладем в канал квадрат данного числа
		}(num)
	}

	go func() { // В горутине, чтобы подсчет суммы уже начался
		wg.Wait()         // Ждем, когда WaitGroup будет равен 0 процессов
		close(squareChan) // Закрываем канал
	}()

	for num := range squareChan { // Идем циклом, пока канал не будет закрыт
		sum += num // Считаем сумму
	}

	fmt.Println(sum)
}
