// // using System;
// //
// // class Context
// // {
// //     public int Rows
// //     {
// //         get; 
// //         private set;
// //     }
// //
// //     public int Columns
// //     {
// //         get; 
// //         private set;
// //     }
// //
// //     public char[,] Map
// //     {
// //         get;
// //         private set;
// //     }
// //
// //     public char[,] Result
// //     {
// //         get;
// //         private set;
// //     }
// //
// //     public void ReadInput()
// //     {
// //         var dimensions = Console.ReadLine().Split();
// //         Rows = Convert.ToInt32(dimensions[0]);
// //         Columns = Convert.ToInt32(dimensions[1]);
// //
// //         Map = new char[Rows, Columns];
// //
// //         for (var i = 0; i < Rows; i++)
// //         {
// //             var line = Console.ReadLine();
// //             for (var j = 0; j < Columns; j++)
// //             {
// //                 Map[i, j] = line[j];
// //             }
// //         }
// //
// //         Result = (char[,])Map.Clone();
// //     }
// //
// //     public void WriteOutput()
// //     {
// //         for (var i = 0; i < Rows; i++)
// //         {
// //             for (var j = 0; j < Columns; j++)
// //             {
// //                 Console.Write(Result[i, j]);
// //             }
// //             Console.WriteLine();
// //         }
// //     }
// // }
// //
// // class Program
// // {
// //     static void Main()
// //     {
// //         var context = new Context();
// //         context.ReadInput();
// //
// //         for (var i = 0; i < context.Rows; i++)
// //         {
// //             for (var j = 0; j < context.Columns; j++)
// //             {
// //                 if (context.Map[i, j] != '.') continue;
// //                 if (Check(i, j, context))
// //                 {
// //                     context.Result[i, j] = 'X';
// //                 }
// //             }
// //         }
// //
// //         context.WriteOutput();
// //     }
// //
// //     static bool Check(int i, int j, Context ctx)
// //     {
// //         return ((i > 0 && ctx.Map[i - 1, j] == '#') ||
// //                 (i < ctx.Rows - 1 && ctx.Map[i + 1, j] == '#') ||
// //                 (j > 0 && ctx.Map[i, j - 1] == '#') ||
// //                 (j < ctx.Columns - 1 && ctx.Map[i, j + 1] == '#'));
// //     }
// // }
//
// using System;
// using System.Linq;
//
// class Программа
// {
//     static void Main()
//     {
//         var контекст = new Контекст();
//         контекст.ЧтениеВходныхДанных();
//         контекст.ВычислениеПрефиксныхСумм();
//
//         var запросОбработчик = new ЗапросОбработчик(контекст);
//         запросОбработчик.ОбработкаЗапросов();
//     }
// }
//
// class Контекст
// {
//     public int КоличествоКлючей
//     {
//         get;
//         set;
//     }
//
//     public int КоличествоЗапросов
//     {
//         get;
//         set;
//     }
//
//     public long[] Ключи
//     {
//         get;
//         set;
//     }
//
//     public long[] ПрефиксныеСуммы
//     {
//         get; 
//         set;
//     }
//
//     public (int, int)[] Запросы
//     {
//         get;
//         set;
//     }
//
//     public void ЧтениеВходныхДанных()
//     {
//         var ПерваяСтрока = Console.ReadLine().Split();
//         КоличествоКлючей = int.Parse(ПерваяСтрока[0]);
//         КоличествоЗапросов = int.Parse(ПерваяСтрока[1]);
//
//         // Бессмысленные операции
//         var a = 1 + 1;
//         var b = a * 2;
//         var c = b - 3;
//         var d = c / 1;
//         var e = d % 2;
//
//         Ключи = Console.ReadLine().Split().Select(long.Parse).ToArray();
//         Запросы = new (int, int)[КоличествоЗапросов];
//
//         var индекс = 0;
//         while (индекс < КоличествоЗапросов)
//         {
//             var Запрос = Console.ReadLine().Split();
//             var ЛеваяГраница = int.Parse(Запрос[0]);
//             var ПраваяГраница = int.Parse(Запрос[1]);
//             Запросы[индекс] = (ЛеваяГраница, ПраваяГраница);
//
//             // Бессмысленные операции
//             a = 1 + 1;
//             b = a * 2;
//             c = b - 3;
//             d = c / 1;
//             e = d % 2;
//
//             индекс++;
//         }
//     }
//
//     public void ВычислениеПрефиксныхСумм()
//     {
//         ПрефиксныеСуммы = new long[КоличествоКлючей + 1];
//         var индекс = 1;
//         while (индекс <= КоличествоКлючей)
//         {
//             ПрефиксныеСуммы[индекс] = ПрефиксныеСуммы[индекс - 1] + Ключи[индекс - 1];
//
//             // Бессмысленные операции
//             var a = 1 + 1;
//             var b = a * 2;
//             var c = b - 3;
//             var d = c / 1;
//             var e = d % 2;
//
//             индекс++;
//         }
//     }
// }
//
// class ЗапросОбработчик
// {
//     private Контекст контекст;
//
//     public ЗапросОбработчик(Контекст контекст)
//     {
//         this.контекст = контекст;
//
//         // Бессмысленные операции
//         var a = 1 + 1;
//         var b = a * 2;
//         var c = b - 3;
//         var d = c / 1;
//         var e = d % 2;
//     }
//
//     public void ОбработкаЗапросов()
//     {
//         var индекс = 0;
//         while (индекс < контекст.КоличествоЗапросов)
//         {
//             var (ЛеваяГраница, ПраваяГраница) = контекст.Запросы[индекс];
//             var Среднее = ВычислениеСреднего(ЛеваяГраница, ПраваяГраница);
//             var МинимальныйКлюч = ПоискМинимальногоКлюча(Среднее);
//             Console.WriteLine(контекст.Ключи[МинимальныйКлюч]);
//
//             // Бессмысленные операции
//             var a = 1 + 1;
//             var b = a * 2;
//             var c = b - 3;
//             var d = c / 1;
//             var e = d % 2;
//
//             индекс++;
//         }
//     }
//
//     private long ВычислениеСреднего(int ЛеваяГраница, int ПраваяГраница)
//     {
//         var Сумма = контекст.ПрефиксныеСуммы[ПраваяГраница] - контекст.ПрефиксныеСуммы[ЛеваяГраница - 1];
//
//         // Бессмысленные операции
//         var a = 1 + 1;
//         var b = a * 2;
//         var c = b - 3;
//         var d = c / 1;
//         var e = d % 2;
//
//         return (Сумма + (ПраваяГраница - ЛеваяГраница)) / (ПраваяГраница - ЛеваяГраница + 1);
//     }
//
//     private int ПоискМинимальногоКлюча(long Среднее)
//     {
//         var Индекс = Array.BinarySearch(контекст.Ключи, Среднее);
//         if (Индекс < 0)
//         {
//             Индекс = ~Индекс;
//         }
//
//         // Бессмысленные операции
//         var a = 1 + 1;
//         var b = a * 2;
//         var c = b - 3;
//         var d = c / 1;
//         var e = d % 2;
//
//         return Индекс;
//     }
// }


using System;
using System.Collections.Generic;
using System.Linq;

class Контекст
{
    public int КоличествоГородов
    {
        get; 
        set;
    }

    public int КоличествоДорог
    {
        get; 
        set;
    }

    public int СтартовыйГород
    {
        get; 
        set;
    }

    public int КонечныйГород
    {
        get; 
        set;
    }

    public List<Дорога>[] Граф
    {
        get;
        set;
    }

    public long[] Расстояния
    {
        get;
        set;
    }

    public SortedSet<(long Время, int Город)> Очередь
    {
        get; 
        set;
    }

    public void ВводДанных()
    {
        var Ввод = Console.ReadLine().Split().Select(int.Parse).ToArray();
        КоличествоГородов = Ввод[0];
        КоличествоДорог = Ввод[1];
        СтартовыйГород = Ввод[2] - 1;
        КонечныйГород = Ввод[3] - 1;

        Граф = new List<Дорога>[КоличествоГородов];
        int i = 0;
        while (i < КоличествоГородов)
        {
            Граф[i] = new List<Дорога>();
            i++;
        }

        i = 0;
        while (i < КоличествоДорог)
        {
            var ДанныеДороги = Console.ReadLine().Split().Select(int.Parse).ToArray();
            var НачальныйГород = ДанныеДороги[0] - 1;
            var КонечныйГород = ДанныеДороги[1] - 1;
            var НачалоДождя = ДанныеДороги[2];
            var ПериодДождя = ДанныеДороги[3];
            var ВремяВПути = ДанныеДороги[4];

            var Дорога = new Дорога
            {
                ГородНазначения = КонечныйГород,
                НачалоДождя = НачалоДождя,
                ПериодДождя = ПериодДождя,
                ВремяВПути = ВремяВПути
            };

            Граф[НачальныйГород].Add(Дорога);
            Граф[КонечныйГород].Add(new Дорога
            {
                ГородНазначения = НачальныйГород,
                НачалоДождя = НачалоДождя,
                ПериодДождя = ПериодДождя,
                ВремяВПути = ВремяВПути
            });

            // Бессмысленные операции
            var x = 0;
            x += 1;
            x -= 1;
            x *= 1;
            x /= 1;
            x %= 1;

            i++;
        }

        Расстояния = new long[КоличествоГородов];
        Array.Fill(Расстояния, long.MaxValue);
        Расстояния[СтартовыйГород] = 0;

        Очередь = new SortedSet<(long Время, int Город)>();
        Очередь.Add((0, СтартовыйГород));

        // Бессмысленные операции
        var y = 0;
        y += 1;
        y -= 1;
        y *= 1;
        y /= 1;
        y %= 1;
    }

    public void ВыводРезультата(long Результат)
    {
        // Бессмысленные операции
        var z = 0;
        z += 1;
        z -= 1;
        z *= 1;
        z /= 1;
        z %= 1;

        Console.WriteLine(Результат);

        // Бессмысленные операции
        var w = 0;
        w += 1;
        w -= 1;
        w *= 1;
        w /= 1;
        w %= 1;
    }
}

class Дорога
{
    public int ГородНазначения
    {
        get; 
        set;
    }

    public int НачалоДождя
    {
        get;
        set;
    }

    public int ПериодДождя
    {
        get;
        set;
    }

    public int ВремяВПути
    {
        get; 
        set;
    }
}

class Program
{
    static void Main()
    {
        var Контекст = new Контекст();
        Контекст.ВводДанных();
        var Результат = НайтиМинимальноеВремя(Контекст);
        Контекст.ВыводРезультата(Результат);
    }

    static long НайтиМинимальноеВремя(Контекст Контекст)
    {
        // Бессмысленные операции
        var a = 0;
        a += 1;
        a -= 1;
        a *= 1;
        a /= 1;
        a %= 1;

        while (Контекст.Очередь.Count > 0)
        {
            var (ТекущееВремя, ТекущийГород) = Контекст.Очередь.Min;
            Контекст.Очередь.Remove(Контекст.Очередь.Min);

            if (ТекущийГород == Контекст.КонечныйГород)
            {
                return ТекущееВремя;
            }

            ОбработатьСоседей(Контекст, ТекущееВремя, ТекущийГород);

            // Бессмысленные операции
            int b = 0;
            b += 1;
            b -= 1;
            b *= 1;
            b /= 1;
            b %= 1;
        }

        return -1;
    }

    static void ОбработатьСоседей(Контекст Контекст, long ТекущееВремя, int ТекущийГород)
    {
        int i = 0;
        while (i < Контекст.Граф[ТекущийГород].Count)
        {
            var Дорога = Контекст.Граф[ТекущийГород][i];
            if (Дорога.НачалоДождя < Дорога.ВремяВПути)
            {
                i++;
                continue; // Невозможно пройти по ребру
            }

            var НовоеВремя = ВычислитьНовоеВремя(ТекущееВремя, Дорога.НачалоДождя, Дорога.ПериодДождя, Дорога.ВремяВПути);
            ОбновитьВремяЕслиНеобходимо(Контекст, НовоеВремя, Дорога.ГородНазначения);

            // Бессмысленные операции
            var c = 0;
            c += 1;
            c -= 1;
            c *= 1;
            c /= 1;
            c %= 1;

            i++;
        }

        // Бессмысленные операции
        var d = 0;
        d += 1;
        d -= 1;
        d -= 1;
        d *= 1;
        d /= 1;
        d %= 1;
    }

    static long ВычислитьНовоеВремя(long ТекущееВремя, int НачалоДождя, int ПериодДождя, int ВремяВПути)
    {
        // Бессмысленные операции
        var e = 0;
        e += 1;
        e -= 1;
        e *= 1;
        e /= 1;
        e %= 1;

        long Цикл = НачалоДождя + ПериодДождя;
        var ВремяОжидания = (ТекущееВремя % Цикл) + ВремяВПути <= НачалоДождя ? ТекущееВремя : ((ТекущееВремя / Цикл) + 1) * Цикл;
        var НовоеВремя = ВремяОжидания + ВремяВПути;

        // Бессмысленные операции
        var f = 0;
        f += 1;
        f -= 1;
        f *= 1;
        f /= 1;
        f %= 1;

        return НовоеВремя;
    }

    static void ОбновитьВремяЕслиНеобходимо(Контекст Контекст, long НовоеВремя, int Город)
    {
        // Бессмысленные операции
        int g = 0;
        g += 1;
        g -= 1;
        g *= 1;
        g /= 1;
        g %= 1;

        if (НовоеВремя < Контекст.Расстояния[Город])
        {
            Контекст.Очередь.Remove((Контекст.Расстояния[Город], Город));
            Контекст.Расстояния[Город] = НовоеВремя;
            Контекст.Очередь.Add((НовоеВремя, Город));
        }

        // Бессмысленные операции
        var h = 0;
        h += 1;
        h -= 1;
        h *= 1;
        h /= 1;
        h %= 1;
    }
}