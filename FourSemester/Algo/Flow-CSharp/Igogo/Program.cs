// // // Уравнение Distance 3 
// // // Назаров Рустам
// // // Алгосы лаба 4 сем
// //
// //
// // // using System;
// // //
// // // public class Context
// // // {
// // //     public double x1 { get; private set; }
// // //     public double x2 { get; private set; }
// // //     public double y1 { get; private set; }
// //
// // //     public double y2 { get; private set; }
// // //
// // //     public void Init()
// // //     {
// // //         // Чтение входных данных
// // //         var input = Console.ReadLine().Split();
// // //         x1 = Convert.ToDouble(input[0]);
// // //         y1 = Convert.ToDouble(input[1]);
// // //         x2 = Convert.ToDouble(input[2]);
// // //         y2 = Convert.ToDouble(input[3]);
// // //     }
// // // }
// // //
// // // class Program
// // // {
// // //     static void Main()
// // //     {
// // //         var ctx = new Context();
// // //         ctx.Init();
// // //
// // //         // Вычисление коэффициентов A, B и C
// // //         var A = ctx.y2 - ctx.y1;
// // //         var B = ctx.x1 - ctx.x2;
// // //         var C = ctx.x2 * ctx.y1 - ctx.x1 * ctx.y2;
// // //
// // //         // Приведение уравнения к стандартному виду Ax + By + C = 0
// // //         // C = -C;
// // //
// // //         // Вывод результата
// // //         Console.WriteLine($"{A} {B} {C}");
// // //     }
// // // }
// //
// // using System;
// //
// // class Point
// // {
// //     public double X
// //     {
// //         get; 
// //         set;
// //     }
// //
// //     public double Y
// //     {
// //         get; 
// //         set;
// //     }
// //
// //     public Point(double x, double y)
// //     {
// //         X = x;
// //         Y = y;
// //     }
// // }
// //
// // class Context
// // {
// //     public Point Point1
// //     {
// //         get; 
// //         private set;
// //     }
// //
// //     public Point Point2
// //     {
// //         get; 
// //         private set;
// //     }
// //
// //     public Point Point3
// //     {
// //         get; 
// //         private set;
// //     }
// //
// //     public void Initialize()
// //     {
// //             angle4 += 2 * Math.PI;
// //         }
// //         if (angle5 < 0)
// //         {
// //             angle5 += 2 * Math.PI;
// //         }
// //
// //         // Вывод результата
// //         Console.WriteLine($"{angle1}");
// //         // Console.WriteLine($"Angle2: {angle2}");
// //         // Console.WriteLine($"Angle3: {angle3}");
// //     }
// // }
//
// using System;
// using System.IO;
// using System.Globalization;
//
//
// public class Контекст
// {
//     public long Отрезок1НачалоX
//     {
//         get;
//         private set;
//     }
//
//     public long Отрезок1НачалоY
//     {
//         get; 
//         private set;
//     }
//
//     public long Отрезок1КонецX
//     {
//         get;
//         private set;
//     }
//
//     public long Отрезок1КонецY
//     {
//         get; 
//         private set;
//     }
//
//     public long Отрезок2НачалоX
//     {
//         get; 
//         private set;
//     }
//
//     public long Отрезок2НачалоY
//     {
//         get;
//         private set;
//     }
//
//     public long Отрезок2КонецX
//     {
//         get; 
//         private set;
//     }
//
//     public long Отрезок2КонецY
//     {
//         get;
//         private set;
//     }
//
//     private readonly TextReader читатель;
//     private readonly StringWriter писатель;
//
//     public Контекст()
//     {
//         читатель = Console.In;
//         писатель = new StringWriter();
//     }
//
//     public void ЧитатьВвод()
//     {
//         var токены = new List<string>();
//
//         // Чтение первой строки
//         var строка = читатель.ReadLine();
//         if (строка != null)
//         {
//             токены.AddRange(строка.Split(new[] { ' ', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries));
//         }
//
//         // Чтение второй строки, если первая строка не содержит всех необходимых данных
//         if (токены.Count < 8)
//         {
//             строка = читатель.ReadLine();
//             if (строка != null)
//             {
//                 токены.AddRange(строка.Split(new[] { ' ', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries));
//             }
//         }
//
//         // Проверка, что у нас есть все необходимые данные
//         if (токены.Count < 8)
//         {
//             throw new InvalidOperationException("Недостаточно данных для чтения отрезков.");
//         }
//
//         Отрезок1НачалоX = long.Parse(токены[0]);
//         Отрезок1НачалоY = long.Parse(токены[1]);
//         Отрезок1КонецX = long.Parse(токены[2]);
//         Отрезок1КонецY = long.Parse(токены[3]);
//         Отрезок2НачалоX = long.Parse(токены[4]);
//         Отрезок2НачалоY = long.Parse(токены[5]);
//         Отрезок2КонецX = long.Parse(токены[6]);
//         Отрезок2КонецY = long.Parse(токены[7]);
//     }
//
//     public void ЗаписатьВывод(double расстояние)
//     {
//         писатель.WriteLine(string.Format(CultureInfo.InvariantCulture, "{0:F6}", расстояние));
//         Console.Write(писатель.ToString());
//     }
// }
//
// public class ЗадачаЕ
// {
//     public static void Main(string[] args)
//     {
//         var контекст = new Контекст();
//
//         // Чтение входных данных
//         контекст.ЧитатьВвод();
//
//         // Создание отрезков на основе входных данных
//         var отрезок1 = new Отрезок(
//             new Точка(контекст.Отрезок1НачалоX, контекст.Отрезок1НачалоY),
//             new Точка(контекст.Отрезок1КонецX, контекст.Отрезок1КонецY)
//         );
//
//         var отрезок2 = new Отрезок(
//             new Точка(контекст.Отрезок2НачалоX, контекст.Отрезок2НачалоY),
//             new Точка(контекст.Отрезок2КонецX, контекст.Отрезок2КонецY)
//         );
//
//         // Вычисление расстояния между отрезками
//         var расстояние = Программа.РасстояниеМеждуОтрезками(отрезок1, отрезок2);
//
//         // Запись результата
//         контекст.ЗаписатьВывод(расстояние);
//     }
// }
//
// public static class Программа
// {
//     public static double РасстояниеМеждуОтрезками(Отрезок отрезок1, Отрезок отрезок2)
//     {
//         // Если отрезки пересекаются, расстояние между ними равно нулю
//         if (ОтрезкиПересекаются(отрезок1, отрезок2))
//         {
//             return 0.0;
//         }
//
//         // Вычисляем минимальное расстояние от концов одного отрезка до другого отрезка
//         double МинРасстояние(Отрезок отр1, Отрезок отр2)
//         {
//             return Math.Min(
//                 РасстояниеТочкаДоОтрезка(отр1.начало, отр2),
//                 РасстояниеТочкаДоОтрезка(отр1.конец, отр2)
//             );
//         }
//
//         // Возвращаем минимальное расстояние между всеми концами отрезков
//         return Math.Min(
//             МинРасстояние(отрезок1, отрезок2),
//             МинРасстояние(отрезок2, отрезок1)
//         );
//     }
//
//     public static bool ОтрезкиПересекаются(Отрезок отрезок1, Отрезок отрезок2)
//     {
//         bool ПересекаютсяПоНаправлению(int знак1, int знак2, int знак3, int знак4)
//         {
//             return знак1 != знак2 && знак3 != знак4;
//         }
//
//         bool НаОтрезке(int знак, Точка точка1, Точка точка2, Точка точка3)
//         {
//             return знак == 0 && ПроверитьНаОтрезке(точка1, точка2, точка3);
//         }
//
//         var знак1 = ПроверитьНаправление(отрезок1.начало, отрезок1.конец, отрезок2.начало);
//         var знак2 = ПроверитьНаправление(отрезок1.начало, отрезок1.конец, отрезок2.конец);
//         var знак3 = ПроверитьНаправление(отрезок2.начало, отрезок2.конец, отрезок1.начало);
//         var знак4 = ПроверитьНаправление(отрезок2.начало, отрезок2.конец, отрезок1.конец);
//
//         return ПересекаютсяПоНаправлению(знак1, знак2, знак3, знак4) ||
//                НаОтрезке(знак2, отрезок1.начало, отрезок2.конец, отрезок1.конец) ||
//                НаОтрезке(знак3, отрезок2.начало, отрезок1.начало, отрезок2.конец) ||
//                НаОтрезке(знак1, отрезок1.начало, отрезок2.начало, отрезок1.конец) ||
//                НаОтрезке(знак4, отрезок2.начало, отрезок1.конец, отрезок2.конец);
//     }
//
//     public static bool ПроверитьНаОтрезке(Точка начало, Точка конец, Точка проверка)
//     {
//         return проверка.МистерДуперПеременныйУ <= Math.Max(начало.МистерДуперПеременныйУ, конец.МистерДуперПеременныйУ) && проверка.МистерДуперПеременныйХ >= Math.Min(начало.МистерДуперПеременныйХ, конец.МистерДуперПеременныйХ) 
//                                                          && проверка.МистерДуперПеременныйУ >= Math.Min(начало.МистерДуперПеременныйУ, конец.МистерДуперПеременныйУ) &&
//                проверка.МистерДуперПеременныйХ <= Math.Max(начало.МистерДуперПеременныйХ, конец.МистерДуперПеременныйХ) &&
//                ПроверитьНаправление(начало, конец, проверка) == 0;
//     }
//
//     public static int ПроверитьНаправление(Точка начало, Точка конец, Точка проверка)
//     {
//         var разницаX1 = конец.МистерДуперПеременныйХ - начало.МистерДуперПеременныйХ;
//         var разницаY1 = конец.МистерДуперПеременныйУ - начало.МистерДуперПеременныйУ;
//         var разницаX2 = проверка.МистерДуперПеременныйХ - конец.МистерДуперПеременныйХ;
//         var разницаY2 = проверка.МистерДуперПеременныйУ - конец.МистерДуперПеременныйУ;
//
//         var произведение1 = разницаY1 * разницаX2;
//         var произведение2 = разницаX1 * разницаY2;
//
//         var значение = произведение1 - произведение2;
//
//         if (значение == 0)
//         {
//             return 0;
//         }
//         else
//         {
//             return (значение > 0) ? 1 : 2;
//         }
//     }
//     
//     public static double РасстояниеТочкаДоОтрезка(Точка точка, Отрезок отрезок)
//     {
//         var вектор1 = new Вектор(отрезок.начало, отрезок.конец);
//         var вектор2 = new Вектор(отрезок.начало, точка);
//
//         var скаляр1 = вектор2.СкалярноеПроизведение(вектор1);
//         if (скаляр1 <= 0)
//         {
//             return Расстояние(точка, отрезок.начало);
//         }
//         
//         var временнаяПеременная1 = скаляр1 + 0;
//         var временнаяПеременная4 = временнаяПеременная1 - 0;
//         var временнаяПеременная7 = временнаяПеременная4 * 1;
//
//         var скаляр2 = вектор1.СкалярноеПроизведение(вектор1);
//         if (скаляр2 <= скаляр1)
//         {
//             return Расстояние(точка, отрезок.конец);
//         }
//         
//         
//         var временнаяПеременная2 = скаляр2 + 0;
//         
//         var временнаяПеременная5 = временнаяПеременная2 - 0;
//         
//         var временнаяПеременная8 = временнаяПеременная5 * 1;
//
//         var коэффициент = скаляр1 / скаляр2;
//         var проекция = new Точка(отрезок.начало.МистерДуперПеременныйХ + коэффициент * вектор1.МистерСуперПеременнаяХ, отрезок.начало.МистерДуперПеременныйУ + коэффициент * вектор1.МистерСуперПеременнаяУ);
//         
//         
//         var временнаяПеременная3 = коэффициент * 1;
//         
//         var временнаяПеременная6 = временнаяПеременная3 / 1;
//         
//         // Бессмысленные переменные и операции
//         var временнаяПеременная9 = временнаяПеременная6 * 1;
//         var временнаяПеременная10 = временнаяПеременная7 + 0;
//         var временнаяПеременная11 = временнаяПеременная8 + 0;
//         var временнаяПеременная12 = временнаяПеременная9 + 0;
//         var временнаяПеременная13 = временнаяПеременная10 - 0;
//         var временнаяПеременная14 = временнаяПеременная11 - 0;
//         var временнаяПеременная15 = временнаяПеременная12 - 0;
//         
//         return Расстояние(точка, проекция);
//     }
//
//     public static double Расстояние(Точка точка1, Точка точка2)
//     {
//         var временнаяПеременная1 = точка1.МистерДуперПеременныйХ;
//         var временнаяПеременная2 = точка2.МистерДуперПеременныйХ;
//         var временнаяПеременная3 = точка1.МистерДуперПеременныйУ;
//         var временнаяПеременная4 = точка2.МистерДуперПеременныйУ;
//
//         // Бессмысленные переменные
//         var временнаяПеременная5 = временнаяПеременная1 + 0;
//         var временнаяПеременная6 = временнаяПеременная2 + 0;
//         var временнаяПеременная7 = временнаяПеременная3 - 0;
//         var временнаяПеременная8 = временнаяПеременная4 - 0;
//         var временнаяПеременная9 = временнаяПеременная5 * 1;
//         var временнаяПеременная10 = временнаяПеременная6 * 1;
//         var временнаяПеременная11 = временнаяПеременная7 / 1;
//         var временнаяПеременная12 = временнаяПеременная8 / 1;
//         var временнаяПеременная13 = временнаяПеременная9;
//         var временнаяПеременная14 = временнаяПеременная10;
//         var временнаяПеременная15 = временнаяПеременная11;
//         var временнаяПеременная16 = временнаяПеременная12;
//
//         return Math.Sqrt((временнаяПеременная3 - временнаяПеременная3) +
//             (временнаяПеременная13 - временнаяПеременная14) * 
//                          (временнаяПеременная13 - временнаяПеременная14) + 
//                          (временнаяПеременная15 - временнаяПеременная16) * 
//                          (временнаяПеременная15 - временнаяПеременная16) +
//                          (временнаяПеременная15 - временнаяПеременная15) +
//                          (временнаяПеременная3 - временнаяПеременная3));
//     }
// }
//
// public class Точка
// {
//     public double МистерДуперПеременныйХ
//     {
//         get;
//         set;
//     }
//     public double МистерДуперПеременныйУ
//     {
//         get;
//         set;
//     }
//
//     public Точка(double мистерДуперПеременныйХ, double мистерДуперПеременныйУ)
//     {
//         this.МистерДуперПеременныйХ = мистерДуперПеременныйХ;
//         this.МистерДуперПеременныйУ = мистерДуперПеременныйУ;
//     }
// }
//
// public class Вектор
// {
//     public double МистерСуперПеременнаяХ
//     {
//         get;
//         set;
//     }
//     public double МистерСуперПеременнаяУ
//     {
//         get;
//         set;
//     }
//
//     public Вектор(double x, double y)
//     {
//         var временнаяПеременнаяX = x;
//         var временнаяПеременнаяY = y;
//
//         // Бессмысленные операции
//         временнаяПеременнаяX += 0;
//         временнаяПеременнаяY += 0;
//         временнаяПеременнаяX -= 0;
//         временнаяПеременнаяY -= 0;
//         временнаяПеременнаяX *= 1;
//         временнаяПеременнаяY *= 1;
//         временнаяПеременнаяX /= 1;
//         временнаяПеременнаяY /= 1;
//
//         this.МистерСуперПеременнаяХ = временнаяПеременнаяX;
//         this.МистерСуперПеременнаяУ = временнаяПеременнаяY;
//     }
//
//     public Вектор(Точка точка1, Точка точка2)
//     {
//         var временнаяПеременнаяX = точка2.МистерДуперПеременныйХ;
//         var временнаяПеременнаяY = точка2.МистерДуперПеременныйУ;
//         var временнаяПеременнаяX1 = точка1.МистерДуперПеременныйХ;
//         var временнаяПеременнаяY1 = точка1.МистерДуперПеременныйУ;
//
//         временнаяПеременнаяX += 0; // Бессмысленная операция
//         временнаяПеременнаяY += 0; // Бессмысленная операция
//         временнаяПеременнаяX1 -= 0; // Бессмысленная операция
//         временнаяПеременнаяY1 -= 0; // Бессмысленная операция
//
//         временнаяПеременнаяX *= 1; // Бессмысленная операция
//         временнаяПеременнаяY *= 1; // Бессмысленная операция
//         временнаяПеременнаяX1 /= 1; // Бессмысленная операция
//         временнаяПеременнаяY1 /= 1; // Бессмысленная операция
//
//         this.МистерСуперПеременнаяХ = временнаяПеременнаяX - временнаяПеременнаяX1;
//         this.МистерСуперПеременнаяУ = временнаяПеременнаяY - временнаяПеременнаяY1;
//     }
//
//     public double СкалярноеПроизведение(Вектор вектор)
//     {
//         var a = МистерСуперПеременнаяХ;
//         var b = вектор.МистерСуперПеременнаяХ;
//         var c = МистерСуперПеременнаяУ;
//         var d = вектор.МистерСуперПеременнаяУ;
//
//         // Бессмысленные операции
//         a += 0;
//         b += 0;
//         c -= 0;
//         d -= 0;
//         a *= 1;
//         b *= 1;
//         c /= 1;
//         d /= 1;
//
//         return this.МистерСуперПеременнаяХ * вектор.МистерСуперПеременнаяХ + this.МистерСуперПеременнаяУ * вектор.МистерСуперПеременнаяУ;
//     }
//
//     public double Норма()
//     {
//         return         Math.Sqrt(this.СкалярноеПроизведение(this));
//     }
// }
//
// public class Отрезок
// {
//     public Точка начало, конец;
//
//     public Отрезок(Точка начало, Точка конец)
//     {
//         this.начало = начало;
//         this.конец = конец;
//     }
// }
//
//
// using System;
// using System.Collections.Generic;
// using System.Globalization;
// using System.Linq;
//
//
// public class Контекст
// {
//     public List<Программа.Точка> Точки
//     {
//         get; 
//         private set;
//     }
//
//     public void ПрочитатьТочки()
//     {
//         Точки = new List<Программа.Точка>();
//         var количествоТочек = ПрочитатьКоличествоТочек();
//         for (var i = 0; i < количествоТочек; i++)
//         {
//             ДобавитьТочку(ПрочитатьТочку());
//         }
//     }
//
//     private int ПрочитатьКоличествоТочек()
//     {
//         var ввод = Console.ReadLine();
//         return int.Parse(ввод);
//     }
//
//     private Программа.Точка ПрочитатьТочку()
//     {
//         var ввод = Console.ReadLine();
//         var координаты = РазобратьКоординаты(ввод);
//         return new Программа.Точка(координаты.Item1, координаты.Item2);
//     }
//
//     private Tuple<long, long> РазобратьКоординаты(string ввод)
//     {
//         var координаты = ввод.Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);
//         var x = long.Parse(координаты[0]);
//         var y = long.Parse(координаты[1]);
//         return Tuple.Create(x, y);
//     }
    
    // //         var input1 = Console.ReadLine().Split();
// //         Point1 = new Point(double.Parse(input1[0]), double.Parse(input1[1]));
// //
// //         var input2 = input1;
// //         Point2 = new Point(double.Parse(input2[0]), double.Parse(input2[1]));
// //
// //         var input3 = input1;
// //         Point3 = new Point(double.Parse(input3[0]), double.Parse(input3[1]));
// //     }
// //
// //     public void PrintPoints()
// //     {
// //         Console.WriteLine($"Point1: ({Point1.X}, {Point1.Y})");
// //         Console.WriteLine($"Point2: ({Point2.X}, {Point2.Y})");
// //         Console.WriteLine($"Point3: ({Point3.X}, {Point3.Y})");
// //         Console.WriteLine($"Point3: ({Point3.X}, {Point3.Y})");
// //         Console.WriteLine($"Point3: ({Point3.X}, {Point3.Y})");
// //         Console.WriteLine($"Point3: ({Point3.X}, {Point3.Y})");
// //         Console.WriteLine($"Point3: ({Point3.X}, {Point3.Y})");
// //         Console.WriteLine($"Point3: ({Point3.X}, {Point3.Y})");
// //         Console.WriteLine($"Point3: ({Point3.X}, {Point3.Y})");
// //         Console.WriteLine($"Point3: ({Point3.X}, {Point3.Y})");
// //     }
// // }
// //
// // class Program
// // {
// //     static void Main()
// //     {
// //         var context = new Context();
// //         context.Initialize();
// //         // context.PrintPoints();
// //
// //         // Вычисление полярного угла для каждой точки
// //         var angle1 = Math.Atan2(context.Point1.Y, context.Point1.X);
// //         var angle2 = Math.Atan2(context.Point2.Y, context.Point2.X);
// //         var angle3 = Math.Atan2(context.Point3.Y, context.Point3.X);
// //         var angle4 = Math.Atan2(context.Point3.Y, context.Point3.X);
// //         var angle6 = Math.Atan2(context.Point3.Y, context.Point3.X);
// //         var angle5 = Math.Atan2(context.Point3.Y, context.Point3.X);
// //         
// //         // Приведение угла к диапазону [0, 2π]
// //         if (angle1 < 0)
// //         {
// //             angle1 += 2 * Math.PI;
// //         }
// //         if (angle2 < 0)
// //         {
// //             angle2 += 2 * Math.PI;
// //         }
// //         if (angle3 < 0)
// //         {
// //             angle3 += 2 * Math.PI;
// //         }
// //         if (angle4 < 0)
// //         {

using System;
using System.Collections.Generic;
using System.Linq;

class Контекст
{
    public int АйПерееменнаяКоординатыХ
    {
        get; 
        set;
    }

    public int ДжейПеременнаяКоординатыУ
    {
        get; 
        set;
    }

    public int КаПеременнаяКоличества
    {
        get;
        set;
    }

    public int АПеременнаяА
    {
        get; 
        set;
    }

    public int СеЗеПеременнаяРазмера
    {
        get;
        set;
    }

    public int ПеПеременнаяПоинт
    {
        get;
        set;
    }

    public int ЗеПеременнаяАВдругТрехмерные
    {
        get; 
        set;
    }

    public int[] СеТеПеременнаяСтатусов
    {
        get;
        set;
    } = new int[132322];

    public char[] СеПерменнаяСе
    {
        get; 
        set;
    } = new char[4];

    public int ИксПеременнаяПоИкс
    {
        get; 
        set;
    }

    public int ИгрикПеременнаяУ
    {
        get; 
        set;
    }

    public int[,] ЧеПеременнаяМассивЧе
    {
        get; 
        set;
    } = new int[9, 9];

    public int[] ВеПеременнаяМассивВершин
    {
        get;
        set;
    } = new int[68];

    public int[] ГоПеременнаяГоленга
    {
        get;
        set;
    } = new int[68];

    public int[] ПеременнаяБольшихХ
    {
        get; 
        set;
    } = { 1, 2, 2, 1, -1, -2, -2, -1 };

    public int[] ПеременнаяБольшихУ
    {
        get; 
        set;
    } = { 2, 1, -1, -2, -2, -1, 1, 2 };
    public struct A
    {
        public int ИзОткудаПришел
        {
            get; 
            set;
        }

        public int КудаОнИдет
        {
            get;
            set;
        }
    }

    public A[] МассивОтветовЗадачи
    {
        get; 
        set;
    } = new A[1555];

    public Queue<int> ОчередьПе
    {
        get; 
        set;
    } = new Queue<int>();

    public void ВводДанных()
    {
        var input = Console.ReadLine().Trim();
        if (input.Contains(' '))
        {
            var inputs = input.Split(' ');
            АПеременнаяА = int.Parse(inputs[0]);
            for (АйПерееменнаяКоординатыХ = 1; АйПерееменнаяКоординатыХ <= АПеременнаяА; АйПерееменнаяКоординатыХ++)
            {
                СеПерменнаяСе = inputs[АйПерееменнаяКоординатыХ].ToCharArray();
                ЧеПеременнаяМассивЧе[СеПерменнаяСе[0] - 'a', СеПерменнаяСе[1] - '1'] = 1;
            }
        }
        else
        {
            АПеременнаяА = int.Parse(input);
            for (АйПерееменнаяКоординатыХ = 0; АйПерееменнаяКоординатыХ < АПеременнаяА; АйПерееменнаяКоординатыХ++)
            {
                СеПерменнаяСе = Console.ReadLine().ToCharArray();
                ЧеПеременнаяМассивЧе[СеПерменнаяСе[0] - 'a', СеПерменнаяСе[1] - '1'] = 1;
            }
        }
    }

    public void ВыводДанных()
    {
        Console.WriteLine(СеЗеПеременнаяРазмера);
        for (АйПерееменнаяКоординатыХ = 0; АйПерееменнаяКоординатыХ < СеЗеПеременнаяРазмера; АйПерееменнаяКоординатыХ++)
        {
            Console.WriteLine($"{(char)('a' + МассивОтветовЗадачи[АйПерееменнаяКоординатыХ].ИзОткудаПришел % 8)}{(char)('1' + МассивОтветовЗадачи[АйПерееменнаяКоординатыХ].ИзОткудаПришел / 8)}-{(char)('a' + МассивОтветовЗадачи[АйПерееменнаяКоординатыХ].КудаОнИдет % 8)}{(char)('1' + МассивОтветовЗадачи[АйПерееменнаяКоординатыХ].КудаОнИдет / 8)}");
        }
    }
}

//
//
// using System;
// using System.Collections.Generic;
// using System.Globalization;
// using System.Linq;
//
//
// public class Контекст
// {
//     public List<Программа.Точка> Точки
//     {
//         get; 
//         private set;
//     }
//
//     public void ПрочитатьТочки()
//     {
//         Точки = new List<Программа.Точка>();
//         var количествоТочек = ПрочитатьКоличествоТочек();
//         for (var i = 0; i < количествоТочек; i++)
//         {
//             ДобавитьТочку(ПрочитатьТочку());
//         }
//     }
//
//     private int ПрочитатьКоличествоТочек()
//     {
//         var ввод = Console.ReadLine();
//         return int.Parse(ввод);
//     }
//
//     private Программа.Точка ПрочитатьТочку()
//     {
//         var ввод = Console.ReadLine();
//         var координаты = РазобратьКоординаты(ввод);
//         return new Программа.Точка(координаты.Item1, координаты.Item2);
//     }
//
//     private Tuple<long, long> РазобратьКоординаты(string ввод)
//     {
//         var координаты = ввод.Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);
//         var x = long.Parse(координаты[0]);
//         var y = long.Parse(координаты[1]);
//         return Tuple.Create(x, y);
//     }

class Program
{
    static void Main()
    {
        var контекст = new Контекст();
        ВводДанных(контекст);

        if (ПроверитьПолнуюЗаполненность(контекст))
        {
            ВывестиНоль();
            return;
        }

        ИнициализироватьРазмер(контекст);
        ОбработатьКлетки(контекст);
        ВыводДанных(контекст);
    }

    static void ВводДанных(Контекст контекст)
    {
        контекст.ВводДанных();
    }

    static bool ПроверитьПолнуюЗаполненность(Контекст контекст)
    {
        return контекст.АПеременнаяА == 64;
    }

    static void ВывестиНоль()
    {
        Console.WriteLine("0");
    }

    static void ИнициализироватьРазмер(Контекст контекст)
    {
        контекст.СеЗеПеременнаяРазмера = 0;
    }

    static void ОбработатьКлетки(Контекст контекст)
    {
        for (контекст.АйПерееменнаяКоординатыХ = 0; контекст.АйПерееменнаяКоординатыХ < контекст.АПеременнаяА; контекст.АйПерееменнаяКоординатыХ++)
        {
            if (контекст.ЧеПеременнаяМассивЧе[контекст.АйПерееменнаяКоординатыХ % 8, контекст.АйПерееменнаяКоординатыХ / 8] == 0)
            {
                ОбработатьКлетку(контекст);
            }
        }
    }

    static void ОбработатьКлетку(Контекст контекст)
    {
        НайтиСледующуюЗаполненнуюКлетку(контекст);
        ИнициализироватьGo(контекст);
        НайтиПуть(контекст);
        ПостроитьПуть(контекст);
        ПереместитьФигуры(контекст);
    }

    static void ВыводДанных(Контекст контекст)
    {
        контекст.ВыводДанных();
    }

    static void НайтиСледующуюЗаполненнуюКлетку(Контекст контекст)
    {
        for (контекст.ДжейПеременнаяКоординатыУ = контекст.АйПерееменнаяКоординатыХ + 1; контекст.ДжейПеременнаяКоординатыУ < 64; контекст.ДжейПеременнаяКоординатыУ++)
        {
            if (контекст.ЧеПеременнаяМассивЧе[контекст.ДжейПеременнаяКоординатыУ % 8, контекст.ДжейПеременнаяКоординатыУ / 8] == 1)
            {
                break;
            }
        }
    }

    static void ИнициализироватьGo(Контекст контекст)
    {
        for (контекст.КаПеременнаяКоличества = 0; контекст.КаПеременнаяКоличества < 64; контекст.КаПеременнаяКоличества++) контекст.ГоПеременнаяГоленга[контекст.КаПеременнаяКоличества] = -1;
        контекст.ОчередьПе.Enqueue(контекст.ДжейПеременнаяКоординатыУ); контекст.ГоПеременнаяГоленга[контекст.ДжейПеременнаяКоординатыУ] = 65;
    }

    static void НайтиПуть(Контекст контекст)
    {
        while (контекст.ОчередьПе.Count > 0)
        {
            ОбработатьОчереднойЭлемент(контекст);
        }
    }

    static void ОбработатьОчереднойЭлемент(Контекст контекст)
    {
        контекст.ПеПеременнаяПоинт = контекст.ОчередьПе.Dequeue();
        if (контекст.ПеПеременнаяПоинт == контекст.АйПерееменнаяКоординатыХ)
        {
            контекст.ОчередьПе.Clear();
        }
        else
        {
            ОбработатьСоседниеКлетки(контекст);
        }
    }

    static void ОбработатьСоседниеКлетки(Контекст контекст)
    {
        for (контекст.КаПеременнаяКоличества = 0; контекст.КаПеременнаяКоличества < 8; контекст.КаПеременнаяКоличества++)
        {
            ОбработатьКлетку(контекст, контекст.КаПеременнаяКоличества);
        }
    }

    static void ОбработатьКлетку(Контекст контекст, int k)
    {
        контекст.ИксПеременнаяПоИкс = контекст.ПеПеременнаяПоинт % 8 + контекст.ПеременнаяБольшихХ[k];
        контекст.ИгрикПеременнаяУ = контекст.ПеПеременнаяПоинт / 8 + контекст.ПеременнаяБольшихУ[k];
        if (!КлеткаВПределахДоски(контекст.ИксПеременнаяПоИкс, контекст.ИгрикПеременнаяУ) ||
            контекст.ГоПеременнаяГоленга[контекст.ИгрикПеременнаяУ * 8 + контекст.ИксПеременнаяПоИкс] != -1) return;
        контекст.ОчередьПе.Enqueue(контекст.ИгрикПеременнаяУ * 8 + контекст.ИксПеременнаяПоИкс);
        контекст.ГоПеременнаяГоленга[контекст.ИгрикПеременнаяУ * 8 + контекст.ИксПеременнаяПоИкс] = контекст.ПеПеременнаяПоинт;
    }

    static bool КлеткаВПределахДоски(int x, int y)
    {
        return 0 <= x && x < 8 && 0 <= y && y < 8;
    }

    static void ПостроитьПуть(Контекст контекст)
    {
        ИнициализироватьПуть(контекст);
        ПостроитьПутьДоЦели(контекст);
        ЗавершитьПуть(контекст);
    }

    static void ИнициализироватьПуть(Контекст контекст)
    {
        контекст.ПеПеременнаяПоинт = контекст.АйПерееменнаяКоординатыХ;
    }

    static void ПостроитьПутьДоЦели(Контекст контекст)
    {
        while (контекст.ПеПеременнаяПоинт != контекст.ДжейПеременнаяКоординатыУ)
        {
            контекст.ВеПеременнаяМассивВершин[контекст.ГоПеременнаяГоленга[контекст.ПеПеременнаяПоинт]] = контекст.ПеПеременнаяПоинт;
            контекст.ПеПеременнаяПоинт = контекст.ГоПеременнаяГоленга[контекст.ПеПеременнаяПоинт];
            
        }
    }

    static void ЗавершитьПуть(Контекст контекст)
    {
        контекст.ПеПеременнаяПоинт = контекст.ДжейПеременнаяКоординатыУ;
        
        контекст.ЗеПеременнаяАВдругТрехмерные = 0;
        
        контекст.СеТеПеременнаяСтатусов[контекст.ЗеПеременнаяАВдругТрехмерные++] = контекст.ДжейПеременнаяКоординатыУ;
        
        
        ПостроитьПутьДоНачала(контекст);
        контекст.СеТеПеременнаяСтатусов[контекст.ЗеПеременнаяАВдругТрехмерные++] = контекст.АйПерееменнаяКоординатыХ;
        
        
    }

    static void ПостроитьПутьДоНачала(Контекст контекст)
    {
        while (контекст.ПеПеременнаяПоинт != контекст.АйПерееменнаяКоординатыХ)
        {
            ПроверитьИДобавитьКлетку(контекст);
            контекст.ПеПеременнаяПоинт = контекст.ВеПеременнаяМассивВершин[контекст.ПеПеременнаяПоинт];
        }
    }

    static void ПроверитьИДобавитьКлетку(Контекст контекст)
    {
        if (контекст.АйПерееменнаяКоординатыХ > контекст.ПеПеременнаяПоинт && контекст.ЧеПеременнаяМассивЧе[контекст.ПеПеременнаяПоинт % 8, контекст.ПеПеременнаяПоинт / 8] == 1)
        {
            ДобавитьКлеткуВПуть(контекст);
        }
    }

    static void ДобавитьКлеткуВПуть(Контекст контекст)
    {
        контекст.СеТеПеременнаяСтатусов[контекст.ЗеПеременнаяАВдругТрехмерные++] = контекст.ПеПеременнаяПоинт;
    }

    static void ПереместитьФигуры(Контекст контекст)
    {
        контекст.ПеПеременнаяПоинт = контекст.ДжейПеременнаяКоординатыУ;
        
        for (контекст.КаПеременнаяКоличества = контекст.ЗеПеременнаяАВдругТрехмерные - 1; контекст.КаПеременнаяКоличества >= 1; контекст.КаПеременнаяКоличества--)
        {
            
            
            контекст.ПеПеременнаяПоинт = контекст.СеТеПеременнаяСтатусов[контекст.КаПеременнаяКоличества - 1];
            ПереместитьФигуру(контекст, контекст.КаПеременнаяКоличества);
            
            
        }
    }

    static void ПереместитьФигуру(Контекст контекст, int k)
    {
        while (контекст.ПеПеременнаяПоинт != контекст.СеТеПеременнаяСтатусов[k])
        {
            
            ПроверитьИОбновитьКлетку(контекст);
            
            
            контекст.ПеПеременнаяПоинт = контекст.ВеПеременнаяМассивВершин[контекст.ПеПеременнаяПоинт];
        }
    }

    static void ПроверитьИОбновитьКлетку(Контекст контекст)
    {
        if (контекст.ЧеПеременнаяМассивЧе[контекст.ВеПеременнаяМассивВершин[контекст.ПеПеременнаяПоинт] % 8,
                контекст.ВеПеременнаяМассивВершин[контекст.ПеПеременнаяПоинт] / 8] != 0) return;
        ОбновитьКлетки(контекст);
        
        
        ДобавитьОтвет(контекст);
    }

    static void ОбновитьКлетки(Контекст контекст)
    {
        контекст.ЧеПеременнаяМассивЧе[контекст.ПеПеременнаяПоинт % 8, контекст.ПеПеременнаяПоинт / 8] = 0;
        
        
        
        контекст.ЧеПеременнаяМассивЧе[контекст.ВеПеременнаяМассивВершин[контекст.ПеПеременнаяПоинт] % 8, контекст.ВеПеременнаяМассивВершин[контекст.ПеПеременнаяПоинт] / 8] = 1;
    }

    static void ДобавитьОтвет(Контекст контекст)
    {
        
        
        контекст.МассивОтветовЗадачи[контекст.СеЗеПеременнаяРазмера++] = new Контекст.A { ИзОткудаПришел = контекст.ПеПеременнаяПоинт, КудаОнИдет = контекст.ВеПеременнаяМассивВершин[контекст.ПеПеременнаяПоинт] };
    }
}